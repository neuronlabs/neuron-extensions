{{define "collection-package" -}}
// Code generated by neurogonesis. DO NOT EDIT.
// This file was generated at:
// {{ timestamp }}

package {{.PackageName}}

{{template "imports" .}}

// Private variable used by public functions.
var {{.Collection.VariableName}} = &{{.Collection.Name}}{}

// ModelStruct gets the stored model struct.
func ModelStruct() *mapping.ModelStruct {
    return {{.Collection.VariableName}}.ModelStruct()
}


// ToModels converts the input slice of {{.ModelName}} into []mapping.Model
func ToModels(input ...*{{.ModelName}}) ([]mapping.Model) {
    return {{.Collection.VariableName}}.ToModels(input...)
}

// FromModels converts the input mapping.Model into []*{{.ModelName}}.
func FromModels(input ...mapping.Model) ([]*{{.ModelName}}) {
    return {{.Collection.VariableName}}.FromModels(input...)
}

// Query creates the query for the {{.ModelName}}.
func Query(db database.DB, models ...*{{.ModelName}}) *{{.Collection.QueryBuilder}} {
    return {{.Collection.VariableName}}.Query(db, models...)
}

// QueryCtx creates the query for the {{.ModelName}} with provided 'ctx' context.
func QueryCtx(ctx context.Context, db database.DB, models ...*{{.ModelName}}) *{{.Collection.QueryBuilder}} {
    return {{.Collection.VariableName}}.QueryCtx(ctx, db, models...)
}

// Insert inserts {{.ModelName}} into database.
func Insert(ctx context.Context, db database.DB, models ...*{{.ModelName}}) error {
    return {{.Collection.VariableName}}.Insert(ctx, db, models...)
}

// Update updates {{.ModelName}} models into database.
func Update(ctx context.Context, db database.DB, models ...*{{.ModelName}}) (int64, error) {
    return {{.Collection.VariableName}}.Update(ctx, db, models...)
}

// Delete deletes {{.ModelName}} models in database.
func Delete(ctx context.Context, db database.DB, models ...*{{.ModelName}}) (int64,error) {
    return {{.Collection.VariableName}}.Delete(ctx, db, models...)
}

// Refresh creates the query for the {{.ModelName}} with provided 'ctx' context.
func Refresh(ctx context.Context, db database.DB, models ...*{{.ModelName}}) error {
    return {{.Collection.VariableName}}.Refresh(ctx, db, models...)
}


{{$out := . -}}
{{range $relation := .Model.Relations -}}

{{if $relation.IsSlice -}}
// Add{{$relation.Name}} adds the '{{$relation.Name}}' relationship for provided input 'models'.
func Add{{$relation.Name}}(ctx context.Context, db database.DB, model *{{$out.ModelName}}, relations ...*{{$relation.BaseType}}) error {
    return {{$out.Collection.VariableName}}.Add{{$relation.Name}}(ctx, db, model, relations...)
}
{{end -}}

// Clear{{$relation.Name}}Relation clears the '{{$relation.Name}}' relationship for provided models. For relationships of type:
// BelongsTo, HasOne, HasMany if foreign key is not nullable than the function would return an error.
func Clear{{$relation.Name}}Relation(ctx context.Context, db database.DB, models ...*{{$out.ModelName}}) (int64, error) {
    return {{$out.Collection.VariableName}}.Clear{{$relation.Name}}Relation(ctx,db,models...)
}


// Get{{$relation.Name}} gets the '{{$relation.Name}}' relationship for provided input 'model'.
func Get{{$relation.Name}}(ctx context.Context, db database.DB, model *{{$out.ModelName}}, relationFieldset ...string) ({{if $relation.IsSlice -}}[]{{- end -}}*{{$relation.BaseType}}, error) {
    return {{$out.Collection.VariableName}}.Get{{$relation.Name}}(ctx, db, model, relationFieldset...)
}


// Set{{$relation.Name}} sets the '{{$relation.Name}}' relationship for provided input 'models'.
func Set{{$relation.Name}}(ctx context.Context, db database.DB, model *{{$out.ModelName}}, relation{{if $relation.IsSlice -}}s ...{{- else}} {{- end -}}*{{$relation.BaseType}}) error {
    return {{$out.Collection.VariableName}}.Set{{$relation.Name}}(ctx, db, model, relation{{if $relation.IsSlice -}}s...{{- end -}})
}
{{end -}}
{{- end}}