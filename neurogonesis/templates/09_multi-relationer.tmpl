{{define "multi-relationer" -}}
{{- $out := . -}}
// Compile time check for the {{$out.Mapping}}MultiRelationer interface implementation.
var _ {{$out.Mapping}}MultiRelationer = &{{.Name}}{}

// AddRelationModel implements {{$out.Mapping}}MultiRelationer interface.
func ({{.Receiver}} *{{.Name}}) AddRelationModel(relation *{{$out.Mapping}}StructField, model {{$out.Mapping}}Model) error {
    switch relation.Index[0] {
    {{range $relation := .Relations -}}{{if $relation.IsSlice -}}
    case {{$relation.Index}}: // {{$relation.Name}}
        {{ $relationName := (toLowerCamel $relation.BaseType) -}}{{$relationName}}, ok := model.(*{{$relation.BaseType}})
        if !ok {
            return errors.Wrapf({{$out.Mapping}}ErrInvalidRelationValue, "provided invalid value type: '%T'  for the field: '{{$relation.Name}}'", model)
        }
        {{if $relation.IsPointer -}}
        if {{$out.Receiver}}.{{$relation.Name}} == nil {
            temp := {{$relation.Type}}{}
            {{$out.Receiver}}.{{$relation.Name}} = &temp
        }
        {{ end -}}
        {{if $relation.IsPointer }}*{{end}}{{$out.Receiver}}.{{$relation.Name}} = append({{if $relation.IsPointer}}*{{end}}{{$out.Receiver}}.{{$relation.Name}}, {{if not $relation.IsElemPointer}}*{{end}}{{$relationName}})
    {{end -}}{{end -}}
    default:
        return errors.Wrapf({{$out.Mapping}}ErrInvalidRelationField, "provided invalid relation: '%T' for the model '{{.Name}}'", model)
    }
    return nil
}

// GetRelationModels implements {{$out.Mapping}}MultiRelationer interface.
func ({{.Receiver}} *{{.Name}}) GetRelationModels(relation *{{$out.Mapping}}StructField) (models []{{$out.Mapping}}Model, err error) {
    switch relation.Index[0] {
    {{range $relation := .Relations -}}{{if $relation.IsSlice -}}
    case {{$relation.Index}}: // {{$relation.Name}}
        {{if $relation.IsElemPointer -}}
        for _, model := range {{$out.Receiver}}.{{$relation.Name}} {
            models = append(models, model)
        }
        {{- else -}}
        for i := range {{$out.Receiver}}.{{$relation.Name}} {
            models = append(models, &({{$out.Receiver}}.{{$relation.Name}}[i]))
        }
        {{- end}}
    {{end -}}{{end -}}
    default:
        return nil, errors.Wrapf({{$out.Mapping}}ErrInvalidRelationField, "provided invalid relation: '%s' for model: '%T'", relation, {{.Receiver}})
    }
    return models, nil
}

// GetRelationModelAt implements {{$out.Mapping}}MultiRelationer interface.
func ({{.Receiver}} *{{.Name}}) GetRelationModelAt(relation *{{$out.Mapping}}StructField, index int) (models {{$out.Mapping}}Model, err error) {
    switch relation.Index[0] {
    {{range $relation := .Relations -}}{{if $relation.IsSlice -}}
    case {{$relation.Index}}: // {{$relation.Name}}
        {{if $relation.IsPointer -}}
        if {{$out.Receiver}}.{{$relation.Name}} == nil {
            return nil, errors.Wrapf({{$out.Mapping}}ErrInvalidRelationIndex, "index out of possible range. Model: '{{$out.Name}}', Field {{$relation.Name}}")
        }
        {{end -}}
        if index > len({{if $relation.IsPointer}}*{{end}}{{$out.Receiver}}.{{$relation.Name}}) - 1 {
            return nil, errors.Wrapf({{$out.Mapping}}ErrInvalidRelationIndex, "index out of possible range. Model: '{{$out.Name}}', Field {{$relation.Name}}")
        }
        return {{if not $relation.IsElemPointer}}&{{end}}{{if $relation.IsPointer}}(*{{end}}{{$out.Receiver}}.{{$relation.Name}}{{if $relation.IsPointer}}){{end}}[index], nil
    {{end -}}{{end -}}
    default:
        return nil, errors.Wrapf({{$out.Mapping}}ErrInvalidRelationField, "provided invalid relation: '%s' for model: '%T'", relation, {{$out.Receiver}})
    }
    return models, nil
}

// GetRelationLen implements {{$out.Mapping}}MultiRelationer interface.
func ({{.Receiver}} *{{.Name}}) GetRelationLen(relation *{{$out.Mapping}}StructField) (int, error) {
    switch relation.Index[0] {
    {{range $relation := .Relations -}}{{if $relation.IsSlice -}}
    case {{$relation.Index}}: // {{$relation.Name}}
        {{if $relation.IsPointer -}}
        if {{$out.Receiver}}.{{$relation.Name}} == nil {
            return 0, nil
        }
        {{end -}}
        return len({{if $relation.IsPointer}}*{{end}}{{$out.Receiver}}.{{$relation.Name}}), nil
    {{end -}}{{end -}}
    default:
        return 0, errors.Wrapf({{$out.Mapping}}ErrInvalidRelationField, "provided invalid relation: '%s' for model: '%T'", relation, {{.Receiver}})
    }
}

// SetRelationModels implements {{$out.Mapping}}MultiRelationer interface.
func ({{.Receiver}} *{{.Name}}) SetRelationModels(relation *{{$out.Mapping}}StructField, models ...{{$out.Mapping}}Model) error {
    switch relation.Index[0] {
    {{range $relation := .Relations -}}{{if $relation.IsSlice -}}
    case {{$relation.Index}}: // {{$relation.Name}}
        temp := make([]*{{$relation.BaseType}}, len(models))
        {{$relationName := (toLowerCamel $relation.BaseType) -}}
        for i, model := range models {
            {{$relationName}}, ok := model.(*{{$relation.BaseType}})
            if !ok {
                return errors.Wrapf({{$out.Mapping}}ErrInvalidRelationValue, "provided invalid value type: '%T'  for the field: '{{$relation.Name}}'", model)
            }
            temp[i] = {{$relationName}}
        }
        {{if $relation.IsPointer -}}
        {{$out.Receiver}}.{{$relation.Name}} = &temp
        {{- else -}}
        {{$out.Receiver}}.{{$relation.Name}} = temp
        {{end -}}
    {{end -}}{{end -}}
    default:
        return errors.Wrapf({{$out.Mapping}}ErrInvalidRelationField, "provided invalid relation: '%s' for the model '{{.Name}}'", relation.String())
    }
    return nil
}
{{end}}