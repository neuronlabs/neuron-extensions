{{define "single-relationer" -}}
{{- $out := . -}}
// Compile time check if {{.Name}} implements {{$out.Mapping}}SingleRelationer interface.
var _ {{$out.Mapping}}SingleRelationer = &{{.Name}}{}

// GetRelationModel implements {{$out.Mapping}}SingleRelationer interface.
func ({{.Receiver}} *{{.Name}}) GetRelationModel(relation *{{$out.Mapping}}StructField) ({{$out.Mapping}}Model, error) {
    switch relation.Index[0] {
    {{range $relation := .Relations -}}{{if not $relation.IsSlice -}}
    case {{$relation.Index}}: // {{$relation.Name}}
        {{if $relation.IsPointer -}}
        if {{$out.Receiver}}.{{$relation.Name}} == nil {
            return nil, nil
        }{{- end}}
        return {{if not $relation.IsPointer -}}&{{end}}{{$out.Receiver}}.{{$relation.Name}}, nil
    {{end -}}{{end -}}
    default:
        return nil, errors.Wrapf({{$out.Mapping}}ErrInvalidRelationField, "provided invalid relation: '%s' for model: '%T'", relation, {{.Receiver}})
    }
}

// SetRelationModel implements {{$out.Mapping}}SingleRelationer interface.
func ({{.Receiver}} *{{.Name}}) SetRelationModel(relation *{{$out.Mapping}}StructField, model {{$out.Mapping}}Model) error {
    switch relation.Index[0] {
    {{range $relation := .Relations -}}
    {{if not $relation.IsSlice -}}
    case {{$relation.Index}}: // {{$relation.Name}}
        if model == nil {
            {{if not $relation.IsPointer -}}
            {{$out.Receiver}}.{{$relation.Name}} = {{$relation.BaseType}}{}
            {{else -}}
            {{$out.Receiver}}.{{$relation.Name}} = nil
            {{end -}}
            return nil
        } else if {{ $relationName := (toLowerCamel $relation.Name) -}}{{ $relationName }}, ok := model.(*{{$relation.BaseType}}); ok {
            {{$out.Receiver}}.{{$relation.Name}} = {{if not $relation.IsPointer -}}*{{end}}{{$relationName}}
            return nil
        }
        return errors.Wrapf({{$out.Mapping}}ErrInvalidRelationValue, "provided invalid model value: '%T' for relation {{$relation.Name}}", model)
    {{end -}}{{end -}}
    default:
        return errors.Wrapf({{$out.Mapping}}ErrInvalidRelationField, "provided invalid relation: '%s' for model: '%T'", relation, {{.Receiver}})
    }
}
{{- end}}