{{define "fielder" -}}
{{- $out := . -}}
// Compile time check if {{.Name}} implements mapping.Fielder interface.
var _ mapping.Fielder = &{{.Name}}{}

// GetFieldsAddress gets the address of provided 'field'.
func ({{.Receiver}} *{{.Name}}) GetFieldsAddress(field *mapping.StructField) (interface{}, error) {
   switch field.Index[0] {
    {{range $field := .Fields -}}
    case {{$field.Index}}: // {{$field.Name}}
        return &{{$out.Receiver}}.{{$field.Name}}, nil
    {{end -}}}
    return nil, errors.Wrapf(mapping.ErrInvalidModelField, "provided invalid field: '%s' for given model: {{.Name}}'", field.Name())
}

// GetFieldZeroValue implements mapping.Fielder interface.s
func ({{.Receiver}} *{{.Name}}) GetFieldZeroValue(field *mapping.StructField) (interface{}, error) {
    switch field.Index[0] {
    {{range $field := .Fields -}}
    case {{$field.Index}}: // {{$field.Name}}
        {{/*        return {{if eq $field.Zero "nil"}}{{if $field.IsPointer}}({{end}}{{$field.Type}}{{if $field.IsPointer}}){{end}}({{end}}{{$field.Zero}}{{if eq $field.Zero "nil"}}){{end}}, nil*/ -}}
        return {{$field.Zero}}, nil
    {{end -}}
    default:
        return nil, errors.Wrapf(mapping.ErrInvalidModelField, "provided invalid field name: '%s'", field.Name())
    }
}

// IsFieldZero implements mapping.Fielder interface.
func ({{.Receiver}} *{{.Name}}) IsFieldZero(field *mapping.StructField) (bool, error) {
    switch field.Index[0] {
    {{range $field := .Fields -}}
    case {{$field.Index}}: // {{$field.Name}}
        return {{$field.IsZero}}, nil
    {{end -}}}
    return false, errors.Wrapf(mapping.ErrInvalidModelField, "provided invalid field name: '%s'", field.Name())
}

// SetFieldZeroValue implements mapping.Fielder interface.s
func ({{.Receiver}} *{{.Name}}) SetFieldZeroValue(field *mapping.StructField) error {
    switch field.Index[0] {
    {{range $field := .Fields -}}
    case {{$field.Index}}: // {{$field.Name}}
        {{$out.Receiver}}.{{$field.Name}} = {{$field.Zero}}
    {{end -}}
    default:
        return errors.Wrapf(mapping.ErrInvalidModelField, "provided invalid field name: '%s'", field.Name())
    }
    return nil
}

// GetHashableFieldValue implements mapping.Fielder interface.
func ({{.Receiver}} *{{.Name}}) GetHashableFieldValue(field *mapping.StructField) (interface{}, error) {
    switch field.Index[0] {
    {{range $field := .Fields -}}
    case {{$field.Index}}: // {{$field.Name}}
        {{if $field.IsPointer -}}
        if {{$out.Receiver}}.{{$field.Name}} == nil {
            return nil, nil
        }
        {{end -}}
        {{if $field.IsByteSlice -}}
            return string({{if $field.IsPointer}}*{{end}}{{$out.Receiver}}.{{$field.Name}}), nil
        {{- else -}}
            return {{if $field.IsPointer}}*{{end}}{{$out.Receiver}}.{{$field.Name}}, nil
        {{- end}}
    {{end -}}}
    return nil, errors.Wrapf(mapping.ErrInvalidModelField, "provided invalid field: '%s' for given model: '{{.Name}}'", field.Name())
}

// GetFieldValue implements mapping.Fielder interface.
func ({{.Receiver}} *{{.Name}}) GetFieldValue(field *mapping.StructField) (interface{}, error) {
    switch field.Index[0] {
    {{range $field := .Fields -}}
    case {{$field.Index}}: // {{$field.Name}}
        return {{$out.Receiver}}.{{$field.Name}}, nil
    {{end -}}}
    return nil, errors.Wrapf(mapping.ErrInvalidModelField, "provided invalid field: '%s' for given model: {{.Name}}'", field.Name())
}

// SetFieldValue implements mapping.Fielder interface.
func ({{.Receiver}} *{{.Name}}) SetFieldValue(field *mapping.StructField, value interface{}) (err error) {
    switch field.Index[0] {
    {{range $field := .Fields -}}
    case {{$field.Index}}: // {{$field.Name}}
        {{if or $field.IsPointer (and $field.IsSlice (eq $field.ArraySize 0)) -}}
        if value == nil {
            {{$out.Receiver}}.{{$field.Name}} = nil
            return nil
        }
        {{end -}}
        if v, ok := value.({{$field.Type}}); ok {
            {{$out.Receiver}}.{{$field.Name}} = v
            return nil
        }{{if and (not $field.IsSlice) $field.IsPointer }}
        // Check if it is non-pointer value.
        if v, ok := value.({{$field.BaseType}}); ok {
            {{$out.Receiver}}.{{$field.Name}} = &v
            return nil
        }{{end}}
        {{if not (or $field.IsPointer $field.IsSlice) -}}
        if field.DatabaseNotNull() {
            isZero := {{$field.IsZero}}
            if isZero {
                {{$out.Receiver}}.{{$field.Name}} = {{$field.Zero}}
                return nil
            }
        }
        {{end -}}
        {{if $field.IsSlice -}}
        if generic, ok := value.([]interface{}); ok {
            {{if eq $field.ArraySize 0 -}}
            {{if $field.IsPointer -}}
            if {{$out.Receiver}}.{{$field.Name}} == nil {
                temp := {{slice $field.Type 1}}{}
                {{$out.Receiver}}.{{$field.Name}} = &temp
            }
            {{end -}}
            for _, item := range generic {
            {{- else -}}
            if len(generic) > {{$field.ArraySize}} {
                return errors.Wrapf(mapping.ErrFieldValue, "provided too many values for the field: '{{$field.Name}}")
            }
            {{if $field.IsPointer -}}
                if {{$out.Receiver}}.{{$field.Name}} == nil {
                var temp {{slice $field.Type 1}}
                {{$out.Receiver}}.{{$field.Name}} = &temp
                }
            {{end -}}
            for i, item := range generic {
            {{- end}}
                {{if not (isFieldWrappedSlice $field) -}}
                if v, ok := item.({{$field.BaseType}}); ok {
                {{- else -}}
                if v, ok := item.({{fieldsWrappedTypeElem $field}}); ok {
                {{end  -}}
                    {{if eq $field.ArraySize 0 -}}
                    {{if $field.IsPointer -}}
                    *{{$out.Receiver}}.{{$field.Name}} = append(*{{$out.Receiver}}.{{$field.Name}}, v)
                    {{- else -}}
                    {{$out.Receiver}}.{{$field.Name}} = append({{$out.Receiver}}.{{$field.Name}}, v)
                    {{- end}}
                    {{- else -}}
                    {{if $field.IsPointer -}}
                    *{{$out.Receiver}}.{{$field.Name}}[i] = v
                    {{- else -}}
                    {{$out.Receiver}}.{{$field.Name}}[i] = v
                    {{- end}}
                    {{- end}}
                    continue
                }
                {{$alternateTypes := (alternates $field.BaseType) -}}
                {{if not (eq (len ($alternateTypes)) 0) -}}
                {{if eq (len $alternateTypes) 1 -}}
                // Check alternate types for the {{$field.Name}}.
                if v, ok := item.({{index $alternateTypes 0}}); ok {
                    {{if $field.IsElemPointer -}}
                    temp := {{$field.BaseType 0}}(v)
                    {{if not $field.ArraySize -}}
                    {{$out.Receiver}}.{{$field.Name}} = append({{$out.Receiver}}.{{$field.Name}}, &temp)
                    {{- else -}}
                    {{$out.Receiver}}.{{$field.Name}}[i]= &temp
                    {{- end}}
                    {{- else -}}
                    {{if not $field.ArraySize -}}
                    {{$out.Receiver}}.{{$field.Name}} = append({{$out.Receiver}}.{{$field.Name}},{{$field.BaseType}}(v))
                    {{- else -}}
                    {{$out.Receiver}}.{{$field.Name}}[i]= {{$field.BaseType}}(v)
                    {{- end}}
                    {{- end}}
                    continue
                }
                return errors.Wrapf(mapping.ErrFieldValue, "provided invalid field type: '%T' for the field: %s", value, field.Name())
                {{- else -}}
                switch v := item.(type) {
                {{range $alternateType := $alternateTypes -}}
                case {{$alternateType}}:
                    {{if $field.IsElemPointer -}}
                    temp := {{$field.BaseType}}(v)
                    {{if not $field.ArraySize -}}
                    {{$out.Receiver}}.{{$field.Name}} = append({{$out.Receiver}}.{{$field.Name}}, &temp)
                    {{- else -}}
                    {{$out.Receiver}}.{{$field.Name}}[i]= &temp
                    {{- end}}
                    {{- else -}}
                    {{if not $field.ArraySize -}}
                    {{$out.Receiver}}.{{$field.Name}} = append({{$out.Receiver}}.{{$field.Name}},{{$field.BaseType}}(v))
                    {{- else -}}
                    {{$out.Receiver}}.{{$field.Name}}[i]= {{$field.BaseType}}(v)
                    {{- end}}
                    {{- end}}{{if $field.IsElemPointer }}
                case *{{$alternateType}}:
                    temp := {{$field.BaseType}}(*v)
                    {{if not $field.ArraySize -}}
                    {{$out.Receiver}}.{{$field.Name}} = append({{$out.Receiver}}.{{$field.Name}}, &temp)
                    {{- else -}}
                    {{$out.Receiver}}.{{$field.Name}}[i]= &temp
                    {{- end}}
                {{- end}}
                {{end -}}default:
                    return errors.Wrapf(mapping.ErrFieldValue, "provided invalid field type: '%T' for the field: %s", value, field.Name())
                }{{- end}}{{end}}
            }
            return nil
        }{{- end}}
        {{if $field.WrappedTypes -}}
        // Checked wrapped types.
        {{range $wrapped := $field.WrappedTypes -}}
        if v, ok := value.({{$wrapped}}); ok {
            {{if $field.IsPointer -}}
            temp := {{slice $field.Type 1}}(v)
            {{$out.Receiver}}.{{$field.Name}} = &temp
            {{else -}}
            {{$out.Receiver}}.{{$field.Name}} = {{$field.BaseType}}(v)
            {{end -}}
            return nil
        }
        {{end}}{{end -}}
        {{if not (eq (len $field.AlternateTypes) 0) -}}
        {{if eq (len $field.AlternateTypes) 1 -}}
        // Check alternate types for the {{$field.Name}}.
        if v, ok := value.({{index $field.AlternateTypes 0}}); ok {
            {{if $field.IsPointer -}}
            temp := {{slice $field.Type 1}}(v)
            {{$out.Receiver}}.{{$field.Name}} = &temp
            {{- else -}}
            {{$out.Receiver}}.{{$field.Name}} = {{$field.Type}}(v)
            {{- end}}
            return nil
        }
        return errors.Wrapf(mapping.ErrFieldValue, "provided invalid field type: '%T' for the field: %s", value, field.Name())
        {{- else -}}
        switch v := value.(type) {
        {{range $alternateType := $field.AlternateTypes -}}
        case {{$alternateType}}:
            {{if $field.IsPointer -}}
            temp := {{$field.BaseType}}(v)
            {{$out.Receiver}}.{{$field.Name}} = &temp
            {{- else -}}
            {{$out.Receiver}}.{{$field.Name}} = {{$field.Type}}(v)
            {{- end}}{{if $field.IsPointer }}
        case *{{$alternateType}}:
            temp := {{$field.BaseType}}(*v)
            {{$out.Receiver}}.{{$field.Name}} = &temp
        {{- end}}
        {{end -}}default:
            return errors.Wrapf(mapping.ErrFieldValue, "provided invalid field type: '%T' for the field: %s", value, field.Name())
        }
        return nil
        {{- end}}
        {{- /* TODO: set the scanner as switch type case*/ -}}
        {{ else -}}
            return errors.Wrapf(mapping.ErrFieldValue, "provided invalid field type: '%T' for the field: %s", value, field.Name())
        {{- end}}
    {{end -}}
    default:
        return errors.Wrapf(mapping.ErrInvalidModelField, "provided invalid field: '%s' for the model: '{{$out.Name}}'", field.Name())
    }
}

// SetPrimaryKeyStringValue implements mapping.Model interface method.
func ({{.Receiver}} *{{.Name}}) ParseFieldsStringValue(field *mapping.StructField, value string) (interface{}, error) {
    switch field.Index[0] {
    {{range $field := .Fields -}}
    case {{$field.Index}}: // {{$field.Name}}
        {{if $field.StringSetter -}}
        return {{ stringParser "value" $field.StringSetter}}
        {{- else if and $field.IsTextUnmarshaler $field.IsTextMarshaler -}}
        {{- if $field.IsPointer -}}
        var base {{$field.BaseType}}
        temp := &base
        {{- else -}}
        temp := {{$out.Receiver}}.{{$field.Name}}
        {{- end}}
        if err := {{if $field.IsPointer -}}temp{{- else -}}{{$out.Receiver}}.{{$field.Name}}{{- end}}.UnmarshalText([]byte(value)); err != nil {
            return "", errors.Wrapf(mapping.ErrFieldValue, "invalid field '{{$field.Name}}' value: '%v' to parse string. Err: %v", {{$out.Receiver}}.{{$field.Name}}, err)
        }
        bt, err := {{if $field.IsPointer -}}temp{{- else -}}{{$out.Receiver}}.{{$field.Name}}{{- end}}.MarshalText()
        if err != nil {
            return "", errors.Wrapf(mapping.ErrFieldValue, "invalid field '{{$field.Name}}' value: '%v' to parse string. Err: %v", {{$out.Receiver}}.{{$field.Name}}, err)
        }
        {{if not $field.IsPointer -}}
        {{$out.Receiver}}.{{$field.Name}} = temp
        {{- end}}
        return string(bt),nil
        {{- else if and $field.IsTextUnmarshaler $field.StringGetter -}}
        {{- if $field.IsPointer -}}
        var base {{$field.BaseType}}
        temp := &base
        {{- else -}}
        temp := {{$out.Receiver}}.{{$field.Name}}
        {{- end}}
        if err := {{if $field.IsPointer -}}temp{{- else -}}{{$out.Receiver}}.{{$field.Name}}{{- end}}.UnmarshalText([]byte(value)); err != nil {
            return "", errors.Wrapf(mapping.ErrFieldValue, "invalid field '{{$field.Name}}' value: '%v' to parse string. Err: %v", {{$out.Receiver}}.{{$field.Name}}, err)
        }
        {{if $field.IsPointer -}}
        return {{stringer "temp" $field.StringSetter}}, nil
        {{- else -}}
        stringValue := {{stringer (selector $out.Receiver $field.Name) $field.StringSetter}}
        {{$out.Receiver}}.{{$field.Name}} = temp
        return stringValue, nil
        {{- end}}
        {{- else if $field.IsString -}}
        return value, nil
        {{- else -}}
        return "", errors.Wrap(mapping.ErrFieldNotParser, "field '{{$field.Name}}' doesn't have string setter.")
        {{- end}}
    {{end -}}}
    return nil, errors.Wrapf(mapping.ErrInvalidModelField, "provided invalid field: '%s' for given model: {{.Name}}'", field.Name())
}
{{- end}}