// Code generated by neurogonesis. DO NOT EDIT.
// This file was generated at:
// Tue, 01 Sep 2020 12:41:09 +0200

package usercollection

import (
	"context"

	"github.com/neuronlabs/neuron-extensions/neurogonesis/internal/tests"
	"github.com/neuronlabs/neuron-extensions/neurogonesis/internal/tests/external"
	"github.com/neuronlabs/neuron/database"
	"github.com/neuronlabs/neuron/mapping"
)

// Private variable used by public functions.
var _users = &NRN_Users{}

// ModelStruct gets the stored model struct.
func ModelStruct() *mapping.ModelStruct {
	return _users.ModelStruct()
}

// ToModels converts the input slice of tests.User into []mapping.Model
func ToModels(input ...*tests.User) []mapping.Model {
	return _users.ToModels(input...)
}

// FromModels converts the input mapping.Model into []*tests.User.
func FromModels(input ...mapping.Model) []*tests.User {
	return _users.FromModels(input...)
}

// Query creates the query for the tests.User.
func Query(db database.DB, models ...*tests.User) *_usersQueryBuilder {
	return _users.Query(db, models...)
}

// QueryCtx creates the query for the tests.User with provided 'ctx' context.
func QueryCtx(ctx context.Context, db database.DB, models ...*tests.User) *_usersQueryBuilder {
	return _users.QueryCtx(ctx, db, models...)
}

// Insert inserts tests.User into database.
func Insert(ctx context.Context, db database.DB, models ...*tests.User) error {
	return _users.Insert(ctx, db, models...)
}

// Update updates tests.User models into database.
func Update(ctx context.Context, db database.DB, models ...*tests.User) (int64, error) {
	return _users.Update(ctx, db, models...)
}

// Delete deletes tests.User models in database.
func Delete(ctx context.Context, db database.DB, models ...*tests.User) (int64, error) {
	return _users.Delete(ctx, db, models...)
}

// Refresh creates the query for the tests.User with provided 'ctx' context.
func Refresh(ctx context.Context, db database.DB, models ...*tests.User) error {
	return _users.Refresh(ctx, db, models...)
}

// ClearFavoriteCarRelation clears the 'FavoriteCar' relationship for provided models. For relationships of type:
// BelongsTo, HasOne, HasMany if foreign key is not nullable than the function would return an error.
func ClearFavoriteCarRelation(ctx context.Context, db database.DB, models ...*tests.User) (int64, error) {
	return _users.ClearFavoriteCarRelation(ctx, db, models...)
}

// GetFavoriteCar gets the 'FavoriteCar' relationship for provided input 'model'.
func GetFavoriteCar(ctx context.Context, db database.DB, model *tests.User, relationFieldset ...string) (*tests.Car, error) {
	return _users.GetFavoriteCar(ctx, db, model, relationFieldset...)
}

// SetFavoriteCar sets the 'FavoriteCar' relationship for provided input 'models'.
func SetFavoriteCar(ctx context.Context, db database.DB, model *tests.User, relation *tests.Car) error {
	return _users.SetFavoriteCar(ctx, db, model, relation)
}

// AddCars adds the 'Cars' relationship for provided input 'models'.
func AddCars(ctx context.Context, db database.DB, model *tests.User, relations ...*tests.Car) error {
	return _users.AddCars(ctx, db, model, relations...)
}

// ClearCarsRelation clears the 'Cars' relationship for provided models. For relationships of type:
// BelongsTo, HasOne, HasMany if foreign key is not nullable than the function would return an error.
func ClearCarsRelation(ctx context.Context, db database.DB, models ...*tests.User) (int64, error) {
	return _users.ClearCarsRelation(ctx, db, models...)
}

// GetCars gets the 'Cars' relationship for provided input 'model'.
func GetCars(ctx context.Context, db database.DB, model *tests.User, relationFieldset ...string) ([]*tests.Car, error) {
	return _users.GetCars(ctx, db, model, relationFieldset...)
}

// SetCars sets the 'Cars' relationship for provided input 'models'.
func SetCars(ctx context.Context, db database.DB, model *tests.User, relations ...*tests.Car) error {
	return _users.SetCars(ctx, db, model, relations...)
}

// AddSons adds the 'Sons' relationship for provided input 'models'.
func AddSons(ctx context.Context, db database.DB, model *tests.User, relations ...*tests.User) error {
	return _users.AddSons(ctx, db, model, relations...)
}

// ClearSonsRelation clears the 'Sons' relationship for provided models. For relationships of type:
// BelongsTo, HasOne, HasMany if foreign key is not nullable than the function would return an error.
func ClearSonsRelation(ctx context.Context, db database.DB, models ...*tests.User) (int64, error) {
	return _users.ClearSonsRelation(ctx, db, models...)
}

// GetSons gets the 'Sons' relationship for provided input 'model'.
func GetSons(ctx context.Context, db database.DB, model *tests.User, relationFieldset ...string) ([]*tests.User, error) {
	return _users.GetSons(ctx, db, model, relationFieldset...)
}

// SetSons sets the 'Sons' relationship for provided input 'models'.
func SetSons(ctx context.Context, db database.DB, model *tests.User, relations ...*tests.User) error {
	return _users.SetSons(ctx, db, model, relations...)
}

// ClearSisterRelation clears the 'Sister' relationship for provided models. For relationships of type:
// BelongsTo, HasOne, HasMany if foreign key is not nullable than the function would return an error.
func ClearSisterRelation(ctx context.Context, db database.DB, models ...*tests.User) (int64, error) {
	return _users.ClearSisterRelation(ctx, db, models...)
}

// GetSister gets the 'Sister' relationship for provided input 'model'.
func GetSister(ctx context.Context, db database.DB, model *tests.User, relationFieldset ...string) (*tests.User, error) {
	return _users.GetSister(ctx, db, model, relationFieldset...)
}

// SetSister sets the 'Sister' relationship for provided input 'models'.
func SetSister(ctx context.Context, db database.DB, model *tests.User, relation *tests.User) error {
	return _users.SetSister(ctx, db, model, relation)
}

// ClearExternalRelation clears the 'External' relationship for provided models. For relationships of type:
// BelongsTo, HasOne, HasMany if foreign key is not nullable than the function would return an error.
func ClearExternalRelation(ctx context.Context, db database.DB, models ...*tests.User) (int64, error) {
	return _users.ClearExternalRelation(ctx, db, models...)
}

// GetExternal gets the 'External' relationship for provided input 'model'.
func GetExternal(ctx context.Context, db database.DB, model *tests.User, relationFieldset ...string) (*external.Model, error) {
	return _users.GetExternal(ctx, db, model, relationFieldset...)
}

// SetExternal sets the 'External' relationship for provided input 'models'.
func SetExternal(ctx context.Context, db database.DB, model *tests.User, relation *external.Model) error {
	return _users.SetExternal(ctx, db, model, relation)
}
