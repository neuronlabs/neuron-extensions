// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/00_imports.tmpl
// templates/01_initialize_collections.tmpl
// templates/02_collection.tmpl
// templates/03_collection-structure.tmpl
// templates/04_collection-builder.tmpl
// templates/05_model.tmpl
// templates/06_primary.tmpl
// templates/07_fielder.tmpl
// templates/08_single-relationer.tmpl
// templates/09_multi-relationer.tmpl
// templates/10_model-definition.tmpl
// templates/11_single-file-models.tmpl
// templates/12_single-file-collections.tmpl
// templates/13_collection-definition.tmpl
// templates/14_collection-initializer.tmpl
// templates/15_collection-initializer-function.tmpl

package bintemplates


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplates00importstmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x2d\xc8\x2f\x2a\x29\x56\x52\xd0\xad\xad\xe5\xaa\xae\xd6\x55\xc8\x4c\x53\xd0\xf3\x84\x08\x82\xc5\x20\x0a\x14\x34\xb8\xaa\xab\x8b\x12\xf3\xd2\x53\x15\x54\xa0\x22\x56\xb6\x08\x85\xb5\xb5\x0a\x0a\x0a\x0a\x4a\xd5\xd5\x50\xc9\xda\x5a\x25\xae\xea\xea\xd4\xbc\x14\x90\x11\x9a\x60\x73\xa1\x1c\x18\xbb\xb6\x16\x10\x00\x00\xff\xff\x08\x20\xfd\xe4\x84\x00\x00\x00")

func bindataTemplates00importstmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates00importstmpl,
		"templates/00_imports.tmpl",
	)
}



func bindataTemplates00importstmpl() (*asset, error) {
	bytes, err := bindataTemplates00importstmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/00_imports.tmpl",
		size: 132,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1597612013, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates01initializecollectionstmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xb1\x4e\xc4\x30\x10\x44\xfb\x7c\xc5\x28\x7d\x7c\x3d\x2d\x47\x71\xcd\x1d\x45\x7a\xb4\xc4\x9b\xb0\xc2\x5e\x47\xf6\x9e\x10\x58\xfe\x77\x94\xa4\x38\x44\xb7\x7a\x33\x23\xed\xab\xd5\xf3\x2c\xca\xe8\x45\xc5\x84\x82\xfc\xf0\xdb\x94\x42\xe0\xc9\x24\x69\xe9\x31\xb4\xd6\x9d\x4e\x78\x4e\x9e\xb1\xb0\x72\x26\x63\x8f\xf7\x6f\x28\xdf\x73\x5a\x92\x72\x91\xe2\x70\xbe\xe1\x7a\x1b\xf1\x72\xbe\x8c\x6e\xeb\x8f\x1f\x52\x30\x4b\x60\x7c\x51\xf9\x33\x24\x7b\xda\xe2\x5a\x61\x12\xb9\x18\xc5\x15\xad\x75\xdd\x4a\xd3\x27\x2d\x8c\x5a\xdd\xeb\x71\x5e\x29\x72\x6b\x5d\xad\x32\xc3\x5d\xe2\x9a\xb2\x15\xec\xc0\x38\xae\x81\x6c\x7b\xfa\xc0\x3d\xdc\x91\xb0\xfa\x7f\x8d\x87\xcb\xf0\x30\xcc\xc3\x7c\xd7\x1d\xf6\x70\xfb\x00\xac\x1e\xad\xfd\x06\x00\x00\xff\xff\xc4\xb5\xbf\x6c\x0f\x01\x00\x00")

func bindataTemplates01initializecollectionstmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates01initializecollectionstmpl,
		"templates/01_initialize_collections.tmpl",
	)
}



func bindataTemplates01initializecollectionstmpl() (*asset, error) {
	bytes, err := bindataTemplates01initializecollectionstmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/01_initialize_collections.tmpl",
		size: 271,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1597612013, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates02collectiontmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xbb\x4e\xc3\x40\x10\x45\x7b\x7f\xc5\x95\x7b\x3b\x3d\x2d\xa1\xa0\x49\x28\xfc\x03\x83\x7d\x63\x46\xec\x4b\xde\x41\x08\x8d\xf6\xdf\xd1\x92\x02\x44\x37\xd2\x39\x23\x9d\xeb\xbe\xf1\xa6\x89\x18\xd7\x1c\x02\x57\xd3\x9c\x46\x4c\xad\x0d\xa7\x13\x1e\xf3\x46\xec\x4c\x3c\xc4\xb8\xe1\xf5\x0b\x89\x1f\x47\xde\x73\x62\xd5\x3a\xe3\x7c\xc5\xe5\xba\xe0\xe9\xfc\xbc\xcc\xdd\x5f\xde\xb4\xe2\xa6\x81\xf8\x94\xfa\xe7\x51\xec\xa1\x63\x77\x98\x46\x56\x93\x58\xd0\xda\x30\x14\x59\xdf\x65\x27\xdc\xe7\x97\xfb\x79\x91\xc8\x4e\xdc\x8d\xb1\x04\x31\x62\xd4\x58\xf2\x61\x75\xc4\xfc\x9f\xfc\x26\x4f\x3f\x2b\xf4\x5e\xdf\x3d\xf7\x09\x4c\x5b\x6b\xdf\x01\x00\x00\xff\xff\x7d\x2e\x09\x85\xe1\x00\x00\x00")

func bindataTemplates02collectiontmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates02collectiontmpl,
		"templates/02_collection.tmpl",
	)
}



func bindataTemplates02collectiontmpl() (*asset, error) {
	bytes, err := bindataTemplates02collectiontmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/02_collection.tmpl",
		size: 225,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1597612013, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates03collectionstructuretmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\xdb\xc8\x11\x7f\xd7\xa7\x98\x13\xee\x22\xd2\xa0\xe9\x3c\x14\x7d\x10\xa0\x02\xb1\x7d\x49\x85\x22\x69\x6b\xbb\x29\x50\xc3\x08\x28\x71\x64\x2d\x4c\xed\x32\xbb\x2b\xc7\x0a\xc1\xef\x5e\xec\x1f\x72\x49\x8a\x94\x64\x49\xb5\x8b\x4b\xee\xc1\x3a\x89\xbb\x33\xb3\xbf\xf9\xed\xfc\x63\xb2\x2c\xc6\x19\xa1\x08\xfd\x29\x4b\x12\x9c\x4a\xc2\xe8\xa9\x90\x7c\x39\x95\x4b\x8e\x7d\x38\xcd\xf3\x5e\xef\xec\x0c\xb2\x2c\xbc\x28\x17\x84\x9f\x23\x4e\xa2\x49\x82\x9f\xa2\x05\xe6\x39\x10\x01\x72\x8e\xe0\x24\xc0\x52\x60\x0c\x92\xc1\xd7\x25\xf2\x95\xda\xfc\x91\xc5\x98\xd8\xe5\x0b\xf5\xff\x61\xef\x31\xe2\x9b\xc5\x8e\xe0\x4d\xfd\xb9\xf9\x3d\xcb\x7b\x3d\xb9\x4a\x11\xda\x1e\x82\xb1\x1d\xb2\x1e\x00\x80\xd6\x0a\x27\x8b\x28\x4d\x09\xbd\x37\x46\x5c\xeb\x05\x3d\x73\xac\x31\x25\x92\x44\x09\xf9\x8e\x4e\x12\x90\x45\x9a\xe0\x02\xa9\x14\x30\x65\x1c\x43\xb7\x88\x03\xa1\x12\xf9\x2c\x9a\x62\xd8\x9b\x2d\xe9\x14\xbc\xba\x11\x57\x38\x45\xf2\x88\x3c\xcf\xe1\xa4\xcd\x3c\xbf\xa2\xd1\xfb\x32\x95\x3c\x81\x13\xad\xe3\x82\x51\xc9\xd5\x6a\xee\x03\x72\xce\xb8\x3d\xc1\xc2\x98\x1b\xa8\x1f\x61\x38\x02\xbd\xa7\x7a\x10\xef\x4d\x1d\xdd\x2c\xf7\xf5\x46\x32\xd3\x5b\x7e\x19\x01\x25\x89\x15\xa6\xfe\xe3\x28\x97\x9c\xaa\x67\xfa\xa7\x5c\xff\xcd\x32\xe8\xf2\x03\x6c\x70\x84\x56\x3b\x2c\x6c\x34\xa2\xac\x7c\x4a\x12\x0b\xf1\x0d\xd3\xcb\x14\x96\xf4\x11\xb9\x34\x5c\x21\x34\x5d\x4a\x10\x09\x99\x22\xb0\x59\x93\x21\x84\x4a\x06\xb7\x77\x35\xbf\xed\x89\x77\xa1\xde\x33\x1a\xc3\x30\x3c\xa9\x2b\xf3\xc1\x6b\x68\xf2\x2d\x5c\x6c\x29\xd5\x96\xe1\x08\x16\xd1\x03\x36\x57\x05\x90\x20\x35\x52\x7d\x03\xf9\x8c\x71\x20\x6a\x39\x8f\xe8\x7d\x71\x44\x87\xbc\x11\x77\x4b\xee\x60\x64\x9e\xdd\x92\xbb\x8a\x0f\x2c\x70\x66\x95\xc5\xee\x3d\x67\x8b\x6e\xf4\x6a\xe6\x14\x98\x35\x4e\xb7\x2f\x4d\x9d\x66\x07\x5c\x03\x24\x6f\x4d\x59\x27\x70\x8d\x75\x47\x81\x2e\xf4\x9a\xda\xb7\x80\xf9\x4f\x1d\x8b\xa6\x1c\x23\x89\x06\x46\x13\x9d\x94\x6e\xf5\xed\x38\xc0\x69\x2d\x5e\x3c\x81\x38\x92\xd1\x24\x12\x18\x5e\x9e\x07\x26\xe4\x89\x56\xf6\x35\xe4\xe8\xfd\xe7\x4b\x92\xc4\x5a\x8b\xc1\x40\x85\x4a\x6d\xac\x25\x43\xf3\x6a\xd8\x0b\xaf\x50\x35\x9a\x7c\xf8\x0b\xbc\xad\x00\x58\xdd\xbc\x89\xce\x76\xb7\x5f\x6e\xd4\x8e\xb1\xf6\x3b\xff\xd8\xe3\x38\xf9\x0d\x1d\xc6\x53\x8b\xd2\x36\xe7\x18\xf3\x77\x62\xce\xa7\x04\xc6\x13\x73\xe4\x4e\xa0\x0b\xf3\xaa\x47\x08\xc3\xd0\xaf\xfa\xf9\xcd\x26\x0c\x33\xab\x6d\x58\xa8\xcd\xab\x84\xb8\x90\x4f\x3b\x73\x02\xbe\x11\x39\x87\x94\xb3\x47\x12\x63\x0c\x83\xa9\x7c\x1a\xa8\x8b\x29\xf1\x49\x1e\xc4\x97\x0b\xf9\xe4\x4d\x95\x21\x56\xd6\x85\xf9\x0c\xe0\x27\x8f\x9e\xcb\x23\x0b\x65\x00\x2f\xcf\xa7\x31\x15\xc8\x25\x10\xfd\x21\x5a\x73\x5a\xe9\xcc\xbd\xab\x07\x25\xfb\x60\xae\x54\x2b\x8c\x86\xbf\x47\xa3\x9a\xc3\x5d\xb9\xc0\xb8\x08\xff\xcd\xa3\xd4\xd3\xc0\x85\xbf\x73\xfe\xc9\xa6\xd6\x00\xfa\x94\xc9\x39\xa1\xf7\xaa\xe4\x33\xc7\xef\x57\xa3\x71\x15\xea\x8d\xd9\xb4\x46\x9b\x1d\x29\xb3\x81\x2e\xb5\x5c\x10\x4f\x42\x87\xde\xb3\xe8\xa1\xd9\x61\x5c\xfc\xaf\x34\x8e\x24\xc2\x52\x7f\xac\xb9\xd8\xda\x76\x14\x4f\x1b\x4d\x07\x7b\xda\x23\x54\xfe\xf9\x4f\x81\x71\xa0\xff\x1c\x97\xbf\x0d\xfe\x20\x5e\x77\x48\xee\xeb\xf5\x4b\x4c\x50\x22\xc4\xfa\xa3\xdb\xeb\x07\xfb\xdc\xe8\x39\x96\xcf\x7f\x60\x97\x3b\x20\xf7\x75\xf9\x15\xce\x38\x8a\xf9\xab\x96\x06\xd6\x86\xa3\x46\xfb\x3d\x2a\x80\x83\x33\x02\x37\xe7\xe8\x64\xca\x2b\x12\xa5\x02\xf1\x5e\x4c\xe9\x65\xd9\xaf\xcc\xb4\x3a\xa1\x9e\x95\x64\x99\x31\xea\x57\x8e\x49\xa4\xa7\x09\xea\x91\xde\x14\x5e\xd9\x9f\x84\x99\xaa\x64\x19\x99\xb9\x75\xe1\x58\x5c\xeb\x6e\x58\x3d\x3b\x3b\x83\x77\x71\x9c\x65\xee\xa9\x65\x59\x14\xc7\x86\x8b\x83\xf5\x87\x03\x28\x7e\x10\x73\x92\x6a\xb0\x4a\x3e\x9a\x86\x6a\x60\xa0\x1a\x38\x42\x2a\xe3\xbb\x49\xd9\x7c\x5a\x10\xaa\xd5\xb6\x67\xd0\xb4\x94\x5d\xeb\x09\x4b\xeb\x2d\x89\x9d\x82\xf3\x48\xe0\xcd\x2a\x6d\x2b\x5d\x8c\xbc\x51\xf7\x94\x63\x23\x49\x4b\x7c\xd4\x6e\x2d\xaa\x46\x52\x7b\x11\x4a\xc3\xf6\xbf\x0b\xe5\xe1\x0a\xb6\x16\x9a\xfb\xf5\xae\xd5\x2c\x7a\x4f\x30\x89\xcb\x91\xcf\x26\x2f\x35\x98\x75\xbe\x1a\xd3\x18\x9f\xbc\x2a\x78\xfa\x97\x7c\x9f\xa9\x50\x21\x62\x97\x80\xee\x30\x6a\x6d\xe8\x9d\x6f\xab\x3a\xab\xe2\xcd\x4d\x2d\xd7\xd5\x67\x23\x5f\x95\x24\x83\xec\x27\xfc\x76\x3d\x65\x29\x6e\x24\x6f\x61\x99\x06\xdb\xaf\x1d\xe6\x5d\x1c\x23\x0f\x80\x3d\xd8\xa6\xc1\x2b\xe9\xa9\xab\xfc\xab\xea\xb2\x12\xb3\x5f\xd8\xc3\x46\xaf\x5f\xa2\x9c\x39\xcf\x8f\xa9\x44\x4e\xa3\x24\x80\xfe\xe5\x39\xc4\x0c\x05\x1d\x48\x37\x55\x84\x75\x45\x6e\xac\x08\xa7\xf0\xdb\x4d\x5f\xdd\x9b\x96\x71\x46\xed\x0c\xc6\xde\x77\x71\x5c\x86\x15\x13\xc5\xbe\x06\x4d\x1e\xd5\x81\xb6\xa1\x2b\xcb\x90\xc6\xe5\x78\xf7\x22\xc1\x88\xaf\xdf\xe9\x42\x34\x4c\xd5\xf3\xbd\x22\x8f\xe1\x7b\x08\xef\x19\xaf\xad\x12\xc0\x66\x20\x57\x29\x0e\x95\xfe\x73\x4c\x18\xbd\x17\x37\x2c\x80\xbf\x46\xe2\xef\x14\xf5\xe7\xc7\x88\xae\x14\xfc\x33\xc6\x91\xdc\x53\x78\xc0\x15\x10\x01\x94\x49\xa0\xcb\x24\x89\x26\x09\x82\x9c\x47\x54\xdb\xa5\x42\x9a\xb6\xf5\x1b\x5b\x26\x71\x01\x59\x64\xfd\x74\x68\xc8\xdb\x02\xd0\x1e\x39\xba\x19\x00\x3b\x6a\xf5\x42\xe1\x6b\x84\x03\x53\x0f\x56\x78\xa8\x0f\x30\x2e\xb8\xfa\xec\x1a\x6f\x43\xce\x6e\x48\xae\xe4\xed\x46\x28\x10\x87\x84\x02\xa7\xa0\xd2\xf1\x1b\x60\xb4\x83\x77\x89\x0c\x76\xe1\xe6\xd8\x50\xaf\xa4\x5f\x38\x3c\x58\x0b\xed\x3c\x44\x7d\x69\x84\x08\xe1\x62\x82\xa9\x62\xce\xce\xe0\x03\xca\x96\x7a\xe3\x1e\xe5\xc1\xf5\xc6\xc1\xe5\x46\xab\x69\x47\x2b\x37\x74\x90\x14\xa8\x27\xdc\x42\x72\x42\xef\x7d\x65\x6a\x57\x6d\x76\x7b\x97\x65\xa7\x60\x63\x67\x47\x95\xb2\xde\x6e\x6f\x2e\x53\x28\x49\xb6\x77\x5e\x5b\x6a\x15\x15\xc4\xe7\x38\x7d\x50\xda\x52\x4e\x16\x11\x5f\xe9\x78\x39\x8f\x04\x7c\x47\xce\xe0\x31\x4a\x96\x18\xd6\x0c\x0a\xc7\xe2\x1f\x66\xe9\xdf\x70\xf5\x1f\xe4\xcc\xf3\x77\x30\xae\xb8\xea\xbf\x73\xae\xb1\xfb\xac\x04\x07\xd0\x37\xce\x16\x43\xcd\x95\x06\xdc\x83\x9a\x4d\xda\x94\x86\x65\xff\x5f\x85\x50\x71\x68\x6b\x53\xd9\x3a\xcd\x34\x59\xe0\xf6\xae\x7c\xa7\x68\xde\x7d\x69\x43\xd7\x8b\x26\x1d\xf0\xaa\x67\x71\x3d\xc0\x9c\xa4\x9e\x6f\xbe\x62\x5c\x7d\x9f\xe7\xb7\x95\x9e\x05\x49\xd7\x2a\x50\x6b\xd0\xa8\xae\x37\x34\xeb\xad\xac\x1c\x30\x11\x58\xdd\xc4\x38\x7c\x09\xcc\xde\xf5\x1a\xad\xbc\x10\xf5\xb1\xac\xb0\xce\x30\xf1\xb1\x45\xdd\xf9\x4a\xf9\xda\xd3\x52\xfd\xda\xd6\xb5\x28\xb9\x85\x62\xb3\x2a\xc7\xc6\xf4\x31\x4a\x88\x81\xc8\x9a\xa0\x0a\x6a\xad\x66\x08\x83\xdf\xc4\x00\x66\x6c\x49\xe3\xb2\x31\xd7\x3c\x1c\xd6\x23\x96\xbb\x9b\x83\xbe\x3d\x78\xdd\xc4\xbc\xf6\xad\x44\x35\x4a\x53\xa4\xb1\x39\x93\x08\x2c\x06\xfe\xda\x2c\xba\xe6\x79\x51\x12\x36\x9e\x84\x1f\x50\x36\x82\xef\x2e\xc9\xaa\x91\x4f\x33\x7d\xa4\x66\xcc\xb2\xe7\x70\xa9\xec\x79\x9c\x6e\x61\xd9\x7a\x83\xb3\xa1\x47\x6d\x48\xd7\x2f\xf9\xda\x00\xcf\xf2\x40\xbf\x0d\x76\x22\x4f\x0d\x1f\x5b\x84\x68\x13\xd7\x16\xd3\x38\xaf\x0e\xfd\xb7\xd8\xc4\x51\x2c\x93\xc6\xcb\xc7\xf6\x20\xdd\xd9\xb7\x38\xa0\xb7\x75\x30\x4a\x55\xbd\x73\xd1\xaf\x25\x5b\x5b\xd7\xb6\x84\xad\xf6\xbb\x13\xaf\x41\xd3\x48\xec\xe2\xf6\xed\x5d\xb7\xfc\x86\x1c\x8d\x9a\x4d\xee\xd7\xad\xc9\x5d\x1c\x21\xb9\x1f\x3e\x4c\x68\xb5\xed\x68\xd9\xbd\x9b\x2c\xba\x0e\x2f\x10\xcf\x73\xd8\x9e\xd6\x5f\x76\xf8\xf0\x3f\x4b\xe8\x3f\x5a\x2e\xaf\x87\xbc\x23\x8c\x12\x34\xa7\x54\x13\xda\x1d\x84\xc8\x0c\x2a\xcf\x8e\xe3\x93\x32\x26\xb5\x5e\x57\xc3\xc5\xba\x1f\x4a\x47\xe9\x44\xd1\xea\x95\x6b\x94\x72\x97\xae\xc7\xac\x7b\x89\x81\x88\xd1\xe4\x5a\x9e\xe1\x0e\x1d\x8f\xd9\x63\x2c\xbe\x5e\xcb\xb8\xdd\x13\x11\xbf\x3d\xec\xbe\xd6\xdc\x6f\xef\x41\xdb\xae\x09\x6b\x67\x5a\x3e\x93\x9a\x8c\xea\x7f\xc5\x75\x24\x86\x42\xad\x1e\xdb\x34\x26\xfc\x49\xe8\xee\x11\x5f\xb3\x10\x70\x03\xbf\xf2\xd7\xff\x06\x00\x00\xff\xff\xe3\x3b\x28\x82\xfd\x29\x00\x00")

func bindataTemplates03collectionstructuretmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates03collectionstructuretmpl,
		"templates/03_collection-structure.tmpl",
	)
}



func bindataTemplates03collectionstructuretmpl() (*asset, error) {
	bytes, err := bindataTemplates03collectionstructuretmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/03_collection-structure.tmpl",
		size: 10749,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598701376, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates04collectionbuildertmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5d\x6f\xdb\x3a\xd2\xbe\xcf\xaf\x98\x13\x9c\x42\x72\xe0\x28\x7d\x81\x17\x7b\x61\xc0\x17\x4d\xbf\x50\xe0\x9c\xd3\xdd\xa6\xbb\xe7\x22\x08\x0e\x68\x71\xe4\x70\x2b\x91\x5e\x92\x4a\x63\x08\xfe\xef\x0b\x0e\xa9\x2f\x7f\x3b\x4e\x91\x04\xdb\x8b\x22\x8d\x44\xcd\x0c\x9f\x99\x79\x66\x38\x4c\x55\x71\xcc\x84\x44\x38\x4d\x55\x9e\x63\x6a\x85\x92\xe7\x93\x52\xe4\x1c\xf5\x29\x9c\x2f\x16\x27\x55\xf5\xab\x2a\x2d\x8c\xc6\x90\xd0\xef\x17\x17\x50\x55\xc9\xdb\x66\x75\xf2\x8f\x12\xf5\xfc\xd2\x7f\xb2\x58\x80\x30\x60\x6f\x11\xfe\xe3\x9e\x42\x90\x04\xa5\x41\x0e\x56\x41\xaa\x91\x59\x04\x26\x39\xe0\x3d\xa6\xa5\x45\x27\xcf\xad\x15\x68\x20\x53\x9a\xbe\xad\xaa\xe4\x77\xc5\x31\xff\x83\x15\xb8\x58\x14\xee\xbf\xc9\x89\x9d\xcf\x70\xbb\x66\x63\x75\x99\x5a\xa8\x4e\x00\xa0\xd1\xcc\x99\x65\x13\x66\x30\x09\xeb\xe8\x25\x6a\xed\xfe\x29\x7d\xb2\x38\x71\x06\x5c\xa5\x6a\x86\xa0\xd1\x96\x5a\x1a\x98\x8a\x3b\x94\x61\x03\xc6\xbd\x49\x4e\xb2\x52\xa6\x10\xf7\xb5\x7f\xc1\x14\xc5\x1d\x69\x3e\xdb\x66\xd7\xc0\x8b\x8f\x07\x70\x46\x32\x13\xaf\xcd\x9b\xe9\x75\x82\x07\x79\xbd\xf4\x24\x6c\x25\x09\x62\x82\xcd\xef\xb5\x6e\x2c\xa6\xbd\x38\xdc\x99\x05\x95\xa6\xa5\xd6\xc8\x81\x97\x5a\xc8\x69\xd7\x11\xee\xd7\x99\x56\x29\x1a\x73\xec\x96\xde\x6b\x1d\x0f\xbc\xde\xb0\x13\x91\xc1\x26\x61\x89\xc3\xfb\x97\x31\x48\x91\x87\xc5\xbd\xad\x6f\xfe\x88\xd6\x2e\x0e\x06\x8a\x8c\x0b\x30\xbd\xb5\xf7\x0d\x4c\x2e\xb6\x52\x25\x2d\xde\x5b\x50\x59\xcf\xcf\xf5\xa7\x47\xc2\xf2\xd6\xde\xc7\x83\x5a\x47\xf2\x36\xe8\x3a\xdc\xd5\x24\xa7\xde\x81\x2a\xa5\xed\xed\x41\x96\xc5\x04\xb5\xdb\x02\xe5\x06\x08\x69\x2c\x93\x69\xc8\xa0\x99\x56\x77\x82\x23\xf7\x3b\x3b\x7a\x47\x4e\x7b\x3c\x80\x58\x48\xfb\xb7\xff\x1f\x7a\x97\x0f\x8e\xf4\xf9\xeb\xe1\x8f\x70\x7b\x30\x35\xc0\xf6\x49\x1a\xd4\x16\x24\x7e\x87\xa8\x4f\x28\x51\x03\x58\x6c\x06\x20\xa4\x55\x84\xaa\xb1\x4a\x1f\x9d\xea\x5e\xeb\xf3\x4d\x8d\xda\xbe\x00\xd2\x3f\x67\xdc\xf1\x71\x49\x3f\x6a\xe6\xdb\x08\xd7\xd1\xac\xe1\xd5\xbd\x8c\x68\xaa\x6d\x75\x48\x39\xa8\x3e\x08\xc9\x9b\x2c\x64\x79\xbe\x54\xa5\x7c\x2a\x06\x0e\x2e\x98\x4d\x6f\xd1\xb8\x8a\xd7\x21\x99\x63\xd1\x73\x16\x38\xec\xae\x6f\xce\xfa\xba\x1f\x09\x47\x29\xf2\xbd\x91\xa4\x0d\x91\x09\x86\xb4\xbb\xfe\x60\x2f\x58\xfd\x26\x6a\x3b\x77\x9a\xd3\xd7\x1a\x30\x1e\x8d\xa1\x60\xdf\xd0\x03\x01\x2d\x12\xe0\xa0\xc8\x51\xc6\x1d\xeb\x06\x5e\x97\x23\x46\xe1\x3e\xd4\x4c\x4e\xb1\x6b\x7e\x47\xb1\x17\x7f\x2d\x6e\x60\xdc\x5d\x71\x2d\x6e\x92\x78\x45\xd3\x60\x35\xae\x8a\x80\x87\x14\x79\xc8\xaf\x2f\x98\x69\x34\xb7\xa0\xfd\x4f\x34\x20\xe4\xac\xb4\xab\x29\xe6\x89\x3c\x13\x98\x73\x93\xc0\x27\x0b\x85\x98\xde\x5a\x98\xb8\x82\x55\x4c\x5c\x83\xf6\x5d\xd8\x5b\xe2\x29\x21\xd3\xbc\x74\xfc\xae\x31\x67\x0e\xe6\xa3\xd3\x32\x58\xf9\x44\xac\xb5\x23\x60\x1a\xe3\x02\xa4\x1f\xb1\x2d\x86\x46\xc8\x69\xbe\xdc\x2f\x06\x2c\x7b\x89\xd8\xcb\x42\x57\x1c\x32\x82\x32\x94\x4f\x03\x52\x59\xc8\x54\x29\x39\x3d\x76\x68\x3a\x73\xfa\xfd\x95\xab\xb7\x5e\xc2\x7b\xad\x09\xc2\x3f\xd4\x17\x34\x65\x6e\x8f\xc5\xff\x23\x52\x85\x7d\xfa\xac\x26\x3c\x0e\xcb\x67\xb2\xfd\x81\xe9\xdc\x4d\x9b\x75\x19\xd6\xcd\xa4\x77\x98\xa3\x45\xe0\xf4\xc3\x2c\xbb\xbc\xed\x80\x36\xbb\xfd\x38\x1f\x79\xfd\x2f\xa3\x74\xd5\xb6\x06\xe8\x3e\x88\xdc\xa2\x06\xc6\xb9\x6f\x1f\xa3\x8c\x1e\x44\x10\x1a\x9f\x47\x2d\x51\x4e\x72\xec\x15\x80\xff\x91\xf8\x87\x21\xc0\xb7\x7c\xfc\x30\x28\x77\xf0\x48\x07\xc2\x3d\xeb\x53\x67\x07\x83\x7d\xa1\x0f\x48\xff\x79\x8b\x1a\xc3\x21\xd7\x84\x93\x05\xf1\x76\x68\xac\x6a\xe0\xdd\xf9\x37\xba\x63\x79\x89\x26\x3a\x16\x72\xd2\x59\x23\x6e\xac\x3b\xf3\x0d\xc1\xcb\x86\x24\x49\x84\xb4\xa8\x33\x96\x62\xb5\xf8\x51\x1e\x78\x6c\x17\x74\x77\x54\x6f\x25\x49\x92\x83\x9c\x51\x55\xbe\xd0\xff\x5a\x17\x49\x1a\x60\x10\x65\x24\x5f\xea\xba\x09\x8b\xfa\xa8\x40\x15\xb5\xaa\x9a\xd5\x49\xa0\xa0\xba\xd8\x36\xad\x71\xbd\xc0\x35\xc5\x61\x56\xb1\x6c\x48\xa0\xa4\xb6\xd8\xbc\x91\xa0\x66\xee\x15\xcb\x5b\x01\x1f\xa8\xd4\xa3\x8d\xc0\x0f\x60\x7c\x6a\xfa\x06\xc0\x25\x66\xd8\x67\xd0\xb2\x52\xf3\xdb\xa8\xd9\x8c\x83\x8b\x9c\xe5\xb7\xab\xe7\x95\xb5\x5b\x5f\x2c\xe2\xaa\xb2\xea\x37\xf5\x1d\xf5\x5b\x56\x60\x0e\xcb\xef\x6b\xfb\x5d\x8c\xf9\xa8\xf3\xe1\xb5\x4b\x61\x27\xc4\xb6\x84\xc2\xf6\x30\xdb\xe2\xfa\x2e\x61\x7a\x7b\xb7\x94\xb3\x7f\x31\x2d\xd8\x24\x47\xbf\xa3\xa5\xe8\xb8\x9c\x7f\x92\x1c\xef\xe3\x2e\x34\xf4\xa4\x6e\xfd\x36\xd5\xbb\x9d\x1b\x1b\x43\x18\xd8\x24\x7f\x6a\x36\xcb\xe2\x82\xcd\x66\x42\x4e\x5d\x5b\xf1\xc9\x65\xab\x64\xf9\x10\x4e\x3f\xa2\xb5\x42\x4e\x5d\xab\xb8\x8c\x7d\x04\x93\x39\x08\x67\x0b\xf5\xb5\xbe\x8b\x89\x82\xde\x5e\x5b\x99\x31\x91\x23\x1f\xc1\xab\xbb\x53\xc2\x61\xf0\x40\x30\x2f\x2e\x20\xbd\xc5\xf4\x5b\x27\x48\xd1\x36\xf3\xba\x36\x28\xdd\xda\x3b\xa6\xa1\x1f\xe5\x70\x7d\x73\x56\x6f\xf2\x8a\x86\x74\xf4\xbc\x69\xcc\xff\x1a\x7a\x99\x6d\x7f\xbe\x6f\xf0\xb5\xa8\x9b\x56\xee\x10\xd4\x37\x12\x55\x7f\x44\x90\x78\xc5\xf1\x20\xa1\x35\x97\x73\x27\x29\x26\xb5\x2d\x28\x22\x83\x5f\xd4\xb7\x8e\xd4\x3d\xfd\xb9\xd9\x9d\x77\x2c\x17\x9c\xf4\x07\xd3\x4e\x49\xe5\x08\xa2\x57\x26\xea\x77\x9e\x35\x9a\x3d\x87\x5f\x32\x83\x5f\xe7\xb3\xf6\x8c\x70\x1a\xb0\x1a\xf4\x6c\xdc\xd7\x9b\xad\x47\xbb\x29\x12\xbc\x34\x06\x36\x9b\xa1\xe4\x71\xff\xf9\xb0\x8b\xed\xe0\x50\x32\x0f\x04\x13\xb7\xe9\xd8\x97\x7e\x20\xb1\x57\xd5\x39\xa0\xe4\x81\xb8\x7f\x13\x85\xb0\x60\xd0\x7a\xf6\x2c\xd8\xbd\x28\xca\xa2\x33\x1f\x53\x93\x7f\x63\x6a\x4d\x10\x8e\xdc\x25\x8e\x5b\x49\x87\xf9\x30\x0a\x1d\xfa\x83\x5a\xb7\xd3\x17\x59\xa7\x31\xa2\x11\x30\xdc\x32\x77\xea\xd7\xc8\xf8\x1c\xb8\xc8\x32\xd4\x28\x2d\xd0\x50\x5a\x65\x30\x63\x53\x21\x97\x88\xf9\x61\xe5\x9c\xb6\x14\xe7\xb4\x31\xea\x34\x5f\x4a\xd5\xee\x18\x7e\x68\xdb\xf4\x39\xcb\x5c\x32\x37\x7e\xf4\x8d\x93\xa6\xb3\x55\x64\x40\xd1\x6b\x3a\x15\x1b\x36\xa7\xea\x68\xbe\x89\x19\x30\x03\x05\x93\xf3\xe0\xe4\xc8\x40\xa6\x55\x11\x08\x69\xa6\x8c\xb0\x4a\xcf\x9d\xf8\x09\x66\x4a\x23\x4c\x70\x2a\xa4\x74\x94\xda\x96\x57\xbf\x98\xce\x70\x10\x79\x33\x22\x78\x5d\xdf\x61\x18\xd7\x04\x30\x03\xaa\x10\x9e\x8b\x29\x3d\xeb\x65\x69\xce\x4a\x83\xc9\xb3\x8a\x1e\x6f\x5b\xec\x11\x7b\x59\xf1\xd3\x33\xfd\xd0\x08\xba\x42\xf7\xaa\x3d\xe2\xb4\x7d\x14\xf9\xd1\xf9\xc0\xc5\x47\x28\x1b\xbe\x2b\xcb\x73\xf5\x1d\x79\x67\xa9\x21\x21\x23\xf7\x12\xce\x9b\x13\x66\xf2\x77\x2d\x0a\xa6\xe7\x75\x5f\x77\xb1\xe6\x0d\x96\x5a\x49\xff\xbe\xed\x3c\x9b\x92\x16\x56\x07\x96\x0d\x77\x68\xa4\xc1\xaf\xe9\x4a\xae\x9f\xf4\x25\xa2\xe4\xf4\xdd\x91\xd7\x50\xb4\xbf\x38\x6c\x78\xa9\x6f\x7b\xd2\x00\x71\x2d\x03\x99\x75\x85\xf6\xf0\x66\x21\x6c\x68\x6b\x2f\xd0\x37\x62\x6d\xe3\x77\x78\x5f\xf0\x23\x7b\x02\x5a\xd4\xb6\x77\x23\x1a\x19\xae\x9c\x32\xa2\xd3\xe1\xb6\x6e\x60\xef\x4e\xa0\x01\xbf\xe9\x01\xea\x27\xc7\x55\xff\x6e\xc8\x5d\xa1\x3d\xf4\x14\xe7\x6a\x83\xe6\xa8\x2f\xe7\x6d\x6a\x1b\xa5\x6d\xed\x72\xba\xbb\xe9\x5e\xd4\xc2\xe5\xdc\x9d\xa7\x58\x99\x87\x35\x0e\x4e\xe5\x44\x20\x07\x66\x52\x94\xdc\xb9\x01\x3e\x49\xff\x94\xd2\xde\x09\xe4\x58\xbf\x74\x4a\x19\xe7\x10\x9d\x47\x75\xe5\x68\x18\x05\xa4\xab\x08\x22\xc1\x04\xa2\x73\xc1\xa3\x04\xbe\xde\x62\x90\xa4\xb2\x2e\xf3\x50\x93\x83\x2d\x03\x89\xa9\x14\x99\x48\x99\x4c\xb1\x5e\xe9\xf4\xba\xa2\x42\x9f\x6f\xa2\x24\xa5\x77\x11\xd2\x5e\x84\x53\x55\x22\x0b\x0b\x92\x2b\xa5\xad\x0b\xfe\xcd\x4c\xd4\x32\xce\x63\x51\x4f\xf0\xe2\x73\xe4\x1e\x07\x71\x40\xaa\xbd\x57\x08\x17\xf5\x4a\x5b\x7f\xa1\xe0\xed\xee\xde\x25\xec\x66\x21\x91\xb5\x9f\x0e\x60\x3c\x86\xd7\x0f\x26\x90\x5d\xfc\x91\x32\xe9\x38\x83\x9a\xa8\x6e\x54\x91\xa9\x4c\x02\x16\x33\x3b\x0f\x06\xef\xa6\x94\x63\xc9\xc4\xb1\xb9\x57\xdf\xc2\x48\x01\xd0\x85\x86\x8c\xb9\x7e\x7d\xe3\x80\x71\xa9\xd6\x87\xc6\x7f\x1e\x6e\x61\x92\x77\x4d\x72\xf6\xc5\x34\xcc\x05\xe3\x20\xef\xff\x46\x37\x6b\x0c\xfa\x9f\xaa\x07\x5b\x8f\x87\x7b\xfb\xb0\xcd\x8a\xce\x75\x18\x79\x92\x9e\x56\x9d\xca\x3c\xea\xe3\xdb\x78\x7b\xe4\xbd\xd8\x6f\x04\x77\x35\x81\x81\x27\x5a\xf5\xab\x25\x63\xcb\xd9\x70\x9f\x99\x9f\xa7\xc3\xf3\x76\x15\x8d\xfa\x46\x63\x88\xb7\x8c\x1c\x06\xcb\x1f\xf9\xc2\xa6\x68\xb0\x14\xcf\xb4\x90\x36\x83\xd3\xbf\x5e\x99\xd3\xbe\xdc\x41\x3d\x62\x7c\xc3\xf9\xea\x1c\xc7\x17\x35\x5f\x2a\x78\x18\xe3\xac\x5b\x25\xf9\xea\x8d\xf2\xea\xb4\xe7\xb1\x46\x82\x6b\x4d\xed\x8e\xc1\xea\xbd\x2f\x16\xe0\xeb\x4a\x3b\x1f\x33\x57\xb9\x48\x9d\x2d\x49\x42\xa5\x63\xb1\x38\x5b\x3f\xcd\x58\x73\xd5\xf8\x03\xc6\x81\x2b\x77\x28\x4f\x34\x12\x0c\xa6\xee\x31\xf5\x9b\x6e\x9b\xfa\x35\x71\x7d\xdc\xf8\xaf\xce\x45\x91\x11\xb3\xac\xb8\x8f\x52\x64\x5f\x84\xeb\xcc\x7d\xc3\x79\x93\x63\x9d\x61\xcf\xda\xb0\x19\x04\x03\xce\x01\x73\xd3\xaa\x5b\xb9\xdd\xaf\x21\xfa\xdd\x5f\x4b\xba\x6a\xba\x5e\xde\xda\x3b\xfe\x0d\x11\xbb\xf6\xb6\x7f\xed\xda\x6b\x71\xf3\xc0\x0b\xb8\x0d\x60\x78\x8d\x0d\xa3\xb5\xb3\xac\xee\x5c\x6b\x6f\x16\x73\x9f\x5c\x9c\xc1\xd7\xcf\xef\x3e\x8f\xc2\x74\x36\x4c\x1e\x9a\x2f\x05\xfd\xa5\x0a\xf5\x94\x56\xc1\x04\x81\xe6\x28\x67\x17\x4f\x44\x82\x57\x68\xd7\xd0\x1b\x8d\x7d\x9e\x1b\x09\xae\x35\xf5\x27\x09\xfe\x24\xc1\x1d\xc7\x5d\xfb\x93\x04\x77\x80\xf1\x14\x24\xe8\x07\xaf\x9e\x02\x35\x16\xea\x0e\xf9\x71\x34\xe8\x87\xbe\x4e\xd0\x1a\xaa\xf2\x1a\x9e\x1f\xa7\x6d\x32\x78\xeb\x1f\xb5\x3c\x90\x90\xe8\x0f\x5b\x5e\x0c\x27\xbd\x1e\x3e\x2f\x5a\x3a\x24\xcd\xbc\x57\x57\x33\x6d\xb0\x94\x50\xe1\x7f\xff\x0d\x00\x00\xff\xff\xe4\x44\x4c\x46\xf1\x31\x00\x00")

func bindataTemplates04collectionbuildertmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates04collectionbuildertmpl,
		"templates/04_collection-builder.tmpl",
	)
}



func bindataTemplates04collectionbuildertmpl() (*asset, error) {
	bytes, err := bindataTemplates04collectionbuildertmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/04_collection-builder.tmpl",
		size: 12785,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598697225, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates05modeltmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xbd\xae\xc2\x30\x0c\x46\xf7\x3c\xc5\xa7\xec\x4d\xf7\xbb\xde\x32\xb0\xb4\x0c\x7d\x01\x43\xdc\x12\xd1\xfc\x28\x09\x42\x28\xca\xbb\xa3\x14\x06\x24\x36\xcb\xc7\x47\xf2\x29\xa5\x83\xe6\xc5\x38\x86\xb4\x5e\xf3\x26\xd1\xd5\x2a\xfa\x1e\xff\x5e\x33\x56\x76\x1c\x29\xb3\xc6\xf9\x09\xc7\xf7\xe8\x5d\xff\xd9\xf9\xa8\x30\x4c\x18\xa7\x19\x87\xe1\x38\xab\xe6\xcc\x57\x93\xb0\x98\x8d\xf1\xa0\xf4\x25\x53\xfe\x6b\xb8\x14\x64\x63\x39\x65\xb2\x01\xb5\x0a\x11\xe8\x72\xa3\x95\x51\x8a\x3a\xbd\xc7\x91\x2c\x37\xd2\x4e\xd9\x86\x8d\x32\x43\x1a\x1b\x7c\xcc\x49\x42\xe1\x87\xed\x4f\x77\x7b\x82\xc9\xc6\x3b\x09\x55\xab\x68\x59\xec\x74\x6b\x79\x05\x00\x00\xff\xff\xbd\x60\xb8\xfa\xe2\x00\x00\x00")

func bindataTemplates05modeltmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates05modeltmpl,
		"templates/05_model.tmpl",
	)
}



func bindataTemplates05modeltmpl() (*asset, error) {
	bytes, err := bindataTemplates05modeltmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/05_model.tmpl",
		size: 226,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1597612013, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates06primarytmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x5b\x8f\xd4\x36\x14\x7e\x9f\x5f\x71\x88\x80\x4d\x56\xb3\xa1\xbc\x2e\xda\x07\xee\x1d\x55\x20\xc4\x6c\x8b\xd4\xaa\xaa\x4c\x72\xb2\x63\x91\xd8\xc1\xf6\x0c\x8c\xa2\xfc\xf7\xca\x76\x2e\xce\x7d\x16\xba\x82\xf2\xc4\xc4\x3e\xdf\xf9\x7c\xee\xf6\x16\x45\x8c\x09\x65\x08\x5e\x2e\x68\x46\xc4\xd1\x83\x8b\xb2\x5c\x15\xc5\x05\xdc\xe7\x7b\x05\x97\x57\x10\x9a\x2f\x8f\x1e\xc1\x73\x9e\xe5\x34\x45\x50\x34\x43\x88\x76\x18\x7d\x02\x9a\x40\x51\x84\x6f\x49\x86\x65\x09\x34\xcb\x53\xcc\x90\x29\x09\x19\xc9\x73\xca\x6e\xc2\x37\x3c\xc6\x14\x28\x53\x28\x12\x12\x61\xb8\x3a\x10\x01\xff\xf4\x96\xaf\xe0\x61\x03\x52\x94\xab\x55\x51\xd0\x04\x18\x57\x10\x3e\xdf\x4b\xc5\xb3\xe7\x3c\x4d\x31\x52\x94\x33\xbd\xa7\x66\xf3\x16\xf7\x82\xb3\xde\xda\x32\x05\xc8\x50\xed\x78\x1c\x6a\x88\xf7\xa8\xf6\x82\x49\x50\x3b\x04\xa6\xc5\x79\x62\xfe\x1f\x35\xa0\x90\x70\x61\x3e\x9d\x35\x0c\xcf\xc2\x55\xb2\x67\x11\xf8\x45\x11\xbe\xc7\x08\xe9\x01\x45\x59\xc2\x79\xb3\x21\x18\xa5\xe6\x07\x20\x95\xa0\xec\x06\x8a\x15\x00\x80\x30\xba\xc1\x2b\x8a\xb0\xbb\xb1\x2c\xbd\x55\x59\x14\xc8\xe2\xb2\x5c\x69\x96\x1b\xf9\xce\xba\xe6\x37\x3c\xfe\x89\x82\xdf\xe6\x90\x4b\x4c\xfb\xd8\x7e\x00\x1f\x39\x4f\xbb\x1c\x8b\x22\xac\x76\x85\x1b\xa9\x77\x95\xe5\xca\x52\x7b\x8d\xaa\x95\xff\x83\xa4\xfb\x5b\x79\x60\x89\xdc\x10\xdd\x0f\x5a\x98\xa2\x1c\xb0\x6c\x71\x42\x87\xb3\x85\x1b\x63\xbc\x35\x0e\xb9\x5b\xde\x8e\x0e\x3f\x00\xdf\xc6\xc0\x1a\x50\x08\x2e\x82\xea\x04\x26\xe0\x1b\xbe\x56\xe2\x35\x2a\x85\xc2\x04\x7b\xe7\x90\x55\x14\xa1\x00\x5f\xa2\x0e\x1b\x2e\xa0\x21\x02\x9d\x43\x07\xe3\x98\x65\xb9\x06\x46\xd3\x4a\xf3\x05\x60\x2a\x11\x5c\x02\x1b\x79\x8d\x5f\xd5\x1b\x22\xe4\x8e\xa4\x0e\x07\x1a\x1b\xde\xba\x26\x2c\x18\x3b\xac\x84\x35\x8e\x1f\x58\xe1\xc4\xc8\xde\xbb\xd2\xba\xab\x73\xbb\x79\xe0\x55\x36\x91\xe1\x07\x41\xf2\xc4\xaf\x9d\xf0\x52\x88\x57\x14\xd3\xd8\x58\x70\x0d\x1e\x65\x07\x92\xd2\x18\xaa\x72\x05\x89\x5e\x84\x83\x5e\xbd\x84\x07\x07\x50\x1c\x72\x22\x24\x56\x76\x0a\xe1\xa5\x10\x7a\xc1\x5b\x2f\x91\x36\x04\x2c\xd9\x8e\xcd\x2d\x90\x4f\xe3\x60\xd1\x6e\xd6\xcc\x43\xa7\xcd\x1b\xcb\x4a\xf9\x63\xf0\x3d\xa4\x9e\x95\x5c\x23\x99\x60\x7d\xa1\x6b\x39\xd5\x95\x64\x0d\x5e\x66\xc2\xd7\x29\x5c\xb0\x23\x12\xfa\xf6\xfb\x84\xb5\x0d\xd5\x31\xc7\x81\xf9\xbc\xa0\x25\x64\x2a\xd2\x48\x1a\x3d\x8d\x63\x81\x52\xde\x59\x0a\x55\xf8\x73\xc9\xff\xf0\x1b\xb2\xff\x57\x22\x77\xe4\x63\x8a\x77\x9b\xff\x1d\x2d\xa3\x47\xe8\x66\xff\x46\xbe\xe3\x66\x4f\x9b\x76\xc9\x52\x04\xc1\xd5\x44\x56\x2d\x59\xa5\x8d\x75\xd3\x70\x1a\x95\x7d\x4a\xcf\x8e\x0a\xb7\x29\x8d\x06\x01\x59\xe5\xc6\xc4\x11\xca\xf2\xbc\x6a\x64\x0b\x44\xea\x20\x1b\x8b\xf9\xef\xc5\xee\x1d\x6f\x24\x10\x74\x4b\xbb\xdb\x20\x68\x34\xcc\x37\x30\x5d\x23\x3f\xb7\x67\x35\xcd\xde\x63\x34\xf5\xf4\x21\x27\xac\xe0\xb7\x56\xa8\x57\xaf\x8f\x39\xce\x48\x04\x95\xc4\x88\xe4\x6b\x54\xb6\xbf\xcf\x72\xa9\x01\x2a\x5b\x6e\xdd\x93\xfe\x97\x26\xdc\x0e\xfb\xff\xc1\xba\xa9\x35\x61\x60\xeb\xe1\xe9\xa9\x64\x11\x06\x09\xb3\x98\x61\x4d\x6d\x76\x3c\x56\x7f\x1a\x4b\x21\xad\x6a\x0d\xfc\x93\xee\x96\x46\x67\xe8\x0f\x5c\x14\x3c\xd1\x1b\x6e\x43\xe2\x30\x45\xc1\x9c\x9c\xb0\x18\x7c\x33\x38\x3b\x2d\x49\xa7\x6d\x30\x67\x94\xb2\xe9\x64\x33\x84\x9f\x11\x89\xdf\x4a\xfa\xe1\x0c\xeb\xca\x64\x45\x21\x08\xbb\x41\xb8\xff\x45\x90\x3c\xc7\xd8\xdc\x3b\x6a\xa0\x0f\xf6\x9b\x56\x2f\x4f\x62\x5d\xa3\x8c\x91\xa5\x89\xb9\xd8\xcc\xd8\x43\xff\x53\x98\xe5\x76\xce\x91\xa6\xec\x75\x44\x34\x11\x78\x5c\x96\xfe\x21\x70\x80\xcd\x96\x8e\x25\x3a\x42\xad\x35\x34\xb6\x23\xd7\xa9\x79\xb7\x83\xea\x7d\x6f\x7d\xd4\x65\xd6\xad\xec\xee\x2f\xa7\xda\xa7\x08\x7e\x8a\xac\xb5\xfa\xd3\x54\xa1\x60\x44\x19\x48\x19\xc0\x63\x07\xe3\x02\x6c\x79\x38\x55\x42\x5f\x1e\xcd\x7d\x91\xd4\x5b\xcc\xb4\x21\xcd\xf5\xea\x86\x1e\x90\xd9\x19\x24\x9c\x4e\x1d\xca\x62\xfc\x3a\xa5\x0b\x7e\xf9\x5f\xb8\xba\x37\xd4\x7d\x97\xb3\xc7\x1c\x5d\xcf\x68\xa7\x95\xa9\xde\xad\x23\x22\x8c\xf5\x4c\x73\xea\xfc\x1a\x11\x66\x2b\xf3\x68\x1f\x77\x90\x4e\x9a\xf0\x73\xc1\x0f\x34\xc6\xb8\x19\x55\xab\xe1\xfe\xec\xc1\xf5\x59\x73\x1f\xef\x8e\xff\xfa\xab\x19\x77\xed\x2e\x6f\xdd\x28\x3e\x58\xd0\xce\x11\x9a\xfe\x35\xea\x95\xdb\xc5\xaa\xfc\x42\x55\xb4\xb3\x6a\x4c\xb0\xb4\x31\xab\xa5\xda\x1b\x5e\x55\xdf\x5a\x50\xb7\xc2\xf5\xa2\xb9\xa6\x12\x11\x89\xda\xef\x8d\x50\x59\x5e\x7e\x47\x7c\x4f\x16\x8b\x9a\xfc\xcf\x1a\xe3\x63\xfc\xdc\x58\x6f\x42\x3a\xc6\x84\xec\x53\x75\xf9\x23\xe2\xae\xbd\x67\x79\x6b\x70\xb2\xa1\x33\xcc\x32\x9a\xce\x0c\x4f\x77\xf4\x1e\x31\xa5\xa3\x9a\xa6\xec\x0c\x3f\x37\x48\x59\x99\x6d\xf7\x45\x42\x65\xb9\xf3\x1c\x50\xa1\xbc\xd3\x77\x47\x01\x9e\x41\xf6\x26\x10\xda\x09\x69\xee\x45\x00\x85\xe8\xf7\x28\x5f\xf7\xf5\x4a\x45\xb7\x44\x8f\x2a\x0a\x9c\x8e\xb5\x34\xa3\x0c\x66\x33\x5f\x65\x79\x30\x5e\x21\x96\xd1\x54\x95\x12\xdd\x30\x1d\x0c\x3f\x93\x6f\x2f\xbf\xb3\x6c\xf8\xfa\x92\x9c\xfa\xf8\xd2\x48\x9b\xe7\x97\xbf\xfe\xfe\x78\x54\x95\xaf\x83\xe0\xc9\x92\xcd\x7f\xc6\x17\x98\x31\x8b\xe9\x59\x77\xf8\xf2\x32\x31\xfd\xf6\x26\x97\x99\x8a\x79\xca\x34\xab\x4f\x3a\x4b\xef\x74\xb0\x79\xac\xe9\x26\x35\xf4\xd7\x8f\x7b\x0b\xda\xa2\x7a\x25\x78\xe6\x56\x2c\xfd\xbb\x4a\x76\xe7\xed\xff\x84\x3a\xa5\x05\x7d\x4b\xb6\x53\xf5\xba\xd5\x89\x26\xb6\xea\x4e\xbe\x7b\xb8\x76\xf9\xbc\x47\x71\xd4\x56\xd9\xd8\xd3\x6e\x58\xbe\x57\x6e\xb9\xd7\x08\x16\x4e\x71\x90\xa8\x20\x11\x3c\xf3\xdc\x30\xd4\x1f\xea\x81\xd4\xec\x0c\x7d\x87\x77\x4d\xe9\x5e\x67\xfc\x1c\x32\x79\x81\x2a\x19\x78\xe9\x2d\x57\x6f\x88\x8a\x76\x2e\x21\x4b\x26\xe6\x28\xd9\x99\x82\x4c\x2f\x9b\xde\x43\x35\xf3\x4b\x78\x70\xed\xad\xed\x1e\x97\xe3\x79\xd7\xae\x57\x70\xae\x59\xf7\x43\xcb\xfe\x65\xc7\x78\xef\xdf\x00\x00\x00\xff\xff\x6b\x47\x34\xf9\xfa\x19\x00\x00")

func bindataTemplates06primarytmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates06primarytmpl,
		"templates/06_primary.tmpl",
	)
}



func bindataTemplates06primarytmpl() (*asset, error) {
	bytes, err := bindataTemplates06primarytmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/06_primary.tmpl",
		size: 6650,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598694830, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates07fieldertmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xeb\x8f\xdb\xb8\x11\xff\xbe\x7f\xc5\xd4\x48\xd6\x92\xe1\xc8\xc9\x57\x1f\x52\xe0\x1e\xe9\x35\x28\x92\x0b\xea\xb4\x05\xba\x58\x1c\xb8\xd6\x78\x4d\x9c\x4c\xf9\x48\x5a\x97\xad\xa0\xff\xbd\x20\x45\xbd\x28\xea\xe1\xdd\x75\xbc\x69\xd7\xdf\x56\x22\x87\xf3\xf8\xcd\x6f\x86\x14\x37\x4d\x43\xdc\x50\x86\x30\xd9\x50\x8c\x42\xe4\x13\x78\x95\x65\x17\x69\xfa\x0a\x5e\xc4\x07\x09\xcb\xb7\x10\xe8\x27\x8b\x05\xfc\x18\xef\xf6\x34\x42\x90\x74\x87\xb0\xde\xe2\xfa\x37\xa0\x1b\x48\xd3\xe0\x23\xd9\x61\x96\x01\xdd\xed\x23\xdc\x21\x93\x02\x76\x64\xbf\xa7\xec\x36\xf8\x4b\x2e\x14\x28\x93\xc8\x37\x64\x8d\xc1\x45\x42\x38\xfc\xda\x1a\xf0\x16\x2e\x4b\x41\x69\x76\xa1\x96\xfb\x19\xa5\x7e\x2b\xbe\x0f\x43\x8e\x42\xc0\x2d\x4a\x01\x72\x8b\x40\xcc\x83\x78\x03\x7b\x1e\x27\x34\xc4\x10\xa6\x5a\xff\x69\x70\xb1\x39\xb0\x35\x78\x69\x1a\xfc\x1d\xd7\x48\x13\xe4\x59\x06\xb3\x52\xb6\xdf\x12\xeb\xe9\x89\x30\x2b\x34\x5a\x49\x7e\x58\xe7\x43\x7c\xf0\x4a\xc5\xd3\x6c\x0e\xc8\x79\xcc\x7d\x48\x2f\x00\x40\xfc\x41\xe5\x7a\x0b\x7a\x72\xf0\x9e\x85\xf8\xe5\xea\xf5\x75\xfe\x0a\xd2\x94\x13\x76\x8b\xf0\x22\x17\xad\x7c\x98\x2f\xa9\x3d\xa9\x46\xac\x89\x40\x48\xd3\x17\xb5\xe9\x59\xb6\x84\xc5\xa2\x7a\x98\xeb\xab\x47\xab\x1f\x47\x79\xe0\x4c\x79\x49\xc5\xa5\x66\x5c\x60\xcd\x98\x03\xa3\x91\x51\x03\x59\xa8\x96\xcc\xa5\x18\x09\x8c\x46\xc6\x12\x11\xfc\x8b\x93\xfd\xc6\x2b\x2c\x7f\xc7\xf9\x7b\x96\x90\x88\x86\x1f\xe2\x10\x23\xad\xf2\x1c\x26\xa5\x8b\x69\xfe\x32\xb7\x79\x09\xd3\x97\x62\x0a\x9b\x98\xc3\x2d\x4d\x90\xc1\x4e\xcd\x59\x56\x70\x98\x4e\xe6\x50\xe9\xe5\xf9\xfe\x45\x33\xac\xff\x46\x1e\xff\x93\x44\x07\x1c\x87\x1b\x31\x3a\xb0\xa5\xe0\x7b\x46\xf6\xab\x87\x36\x4d\x17\x33\x2b\xcc\x69\x4a\x37\x80\xbf\x9b\x65\x02\x65\x12\x4c\x18\x8d\x26\x59\xa6\x5f\x15\xd2\xc5\xa7\x58\xdb\x91\x65\x9e\x8e\xb6\x7a\x6d\xde\x7d\xbe\xdb\x63\xe7\x68\xdf\x8c\x6e\xcd\x52\x2b\x99\x59\xee\xe5\x8b\x99\x1a\x66\xb3\x45\x69\x76\x43\xf9\x86\x30\x07\x20\xf5\x5f\x21\x6e\xc8\x21\x92\x4b\x7b\xfa\x23\x01\x14\x18\xd9\x61\x8e\xd2\x16\x12\xd5\x6a\x99\xc1\xe3\x7b\x51\xa2\x66\x24\x83\x0d\x01\xb1\x26\xb1\x1f\x82\x37\x71\x1c\x9d\x19\x7b\x76\xc8\xde\x8b\xce\xa0\x35\x58\x64\x43\x22\x81\xa7\x0e\x53\x1e\xa0\xd5\xa9\x08\xa3\x25\xb8\x37\x5a\xda\xd4\xb3\x31\xc4\x00\xe9\xc3\x5b\x3b\xeb\x8e\x48\xb8\xaf\x91\x6b\xcd\xfc\xae\x4a\xc1\x5f\x89\xd8\x92\x9b\x08\xb5\xfc\x23\xa2\x3b\xa6\x1a\xb4\x65\x7f\x3b\x15\xc1\xc1\xda\x0d\xaa\xd5\x8d\xd7\x20\x28\xde\x2a\x67\x1b\x3d\x5d\x2c\x5b\xe4\x78\x15\xa3\x36\x6a\xda\xfa\xfc\x70\x27\x71\x15\xd1\x35\x36\xc6\xd4\x64\x0b\xc9\x29\xbb\xf5\x3a\x6a\xcf\xac\xaa\x39\xfd\xfa\xfb\x4d\x05\x55\x4f\x8a\x91\xe8\x5c\xf5\xa1\xcb\x39\x56\x53\xf3\xce\xd7\x4a\x4d\x47\xf7\x52\x8f\x9c\x38\xdf\x5e\xc2\x54\x65\xec\xdb\x6e\x8e\x57\x27\x08\xe8\x6a\x64\x40\xe7\x90\xe4\xab\x56\x51\xf5\xc1\x43\xce\x9f\x00\x17\xc6\xbc\x4d\x87\x1e\x61\x61\xf5\x34\x27\x24\xaf\x6a\x5a\xbf\xe7\x9c\xdc\xad\xe8\x7f\x10\x5e\xfb\xbe\xcd\x9d\xb9\xa5\x4e\x7e\x1c\x53\x6b\xeb\x44\x61\x55\xb6\x31\x74\xaa\x14\x98\x43\xfc\x9b\x72\x90\xd6\x24\xf0\xac\xb6\xdd\xff\x4e\xbd\x3e\x5e\xb1\x64\x50\x2d\xed\x4e\xe5\x39\x8f\xc5\xd2\x72\x9f\xdf\x76\x72\x4d\xeb\xc5\x02\x7e\x2c\x36\xfd\x54\x02\x15\xc0\x62\xf6\x6a\x6f\x06\xe6\x76\x8c\x32\xf1\x07\x22\xf0\x61\x66\x5e\x8e\xb1\xb3\x62\xef\x12\x46\xca\x64\xcf\x85\x25\xdb\x0f\x56\xb4\xf2\xb7\x3f\x11\x49\x6e\x88\xc0\x8f\xb1\xfc\x78\x88\x22\xcf\x87\xcb\xcb\x87\x22\xc9\xd5\xb5\xdd\x13\x55\xcd\xfa\xd7\x2e\xd0\x74\x03\xb7\xc8\x90\xd3\xb5\x15\x98\xab\xeb\x7a\xca\x3b\x43\xd2\xd8\x0e\xd6\x32\xab\x55\x8b\x87\x3b\x17\x78\x50\xf7\xa2\x7e\x12\x77\x7b\xa5\x7e\x9a\x0a\x6d\x64\x2d\x73\xe0\x8d\x3e\x3e\xb2\x67\x8c\xc2\x94\x12\xdb\x98\x69\x5b\x66\x3b\x5c\xfd\x14\xc5\xff\x3a\x07\x2a\x71\xa7\x54\xca\xe9\xcf\xb8\xb9\xe5\xc5\x8e\xfe\x85\x6e\x20\x42\xe6\x99\x59\x3e\xfc\xb9\x42\x45\xe9\xea\x2c\x73\x38\x62\xa0\x7f\xaf\x58\xbf\x5e\xa8\x64\x1c\xc3\x8e\xb0\xbb\x3c\xfa\x42\x5b\x20\xb7\x58\x16\x2e\xcb\x33\x13\xbf\xd7\x27\x63\xa2\xfd\xf0\x88\x27\x84\xe7\x51\xef\x08\xf9\x23\x05\xfc\x98\xa0\xd3\x23\x82\xde\x20\xa2\x86\xef\x34\x21\xd1\xfc\xbc\x40\xc5\x6f\x8f\xe1\xaa\x66\xa0\xdf\xe5\xcb\x92\x5b\x95\x0e\xa3\xa9\x15\xfa\x50\xd8\x25\x59\x0b\x16\x46\x39\x25\xfb\x5d\x84\x3b\xa3\x5f\xdf\x32\xca\x71\xce\x45\xe0\x38\x46\x69\x4c\x19\x85\x35\xf5\x9b\x8d\x41\x80\x32\x89\x85\xde\xf0\xd8\x39\x24\x7e\x87\x52\x3d\xde\x84\x91\x40\x34\x6a\x3c\x50\x0b\x27\xc8\x46\xea\x78\x8c\x67\x47\xb8\xcb\xbf\xa2\xd7\xad\x66\xe4\xf1\x5c\x36\x28\xbd\xdf\x15\x9d\x6f\xd7\x31\x93\x94\x1d\x70\x80\x13\x8c\x8e\x24\x92\xc8\x19\x91\x3a\xdf\x84\xca\x18\xaf\x7c\x24\xc0\xca\x47\x77\x22\x57\x14\x80\xbf\x83\x17\x21\x03\xcf\x12\xeb\xfb\xf0\xba\x67\x6e\x31\xcd\x9e\x05\x6f\x9c\x73\xca\x0e\xae\x1c\x0e\x52\x2b\x5f\xd4\x00\xcb\xd1\xc1\x28\x82\xa0\xaa\x89\xb7\x55\x80\xd7\xdd\xdc\x00\x2d\xcc\x29\x4a\x19\xc2\x5d\x55\xf5\x2d\xdf\xaa\xa5\xbc\xce\xcc\x30\x1e\x6e\x11\xcd\xd7\x49\x58\x5d\x63\x4e\x45\x1d\x57\xf4\xba\xab\x8a\xc1\x23\xb1\xc2\xf9\x5c\xe7\x28\x69\x5e\xe2\x9f\xd4\x95\xee\x25\xcf\x49\x33\xf7\x6a\xf0\x9a\x27\xb3\x2a\xc1\x97\x30\x7d\xf9\x79\x6a\x77\x7a\x2f\xc5\xc4\x6c\xf9\x5d\x47\xb6\xa3\xfd\x6b\xce\x03\x92\x8a\x12\xa4\x26\x3c\x57\x4f\x60\x4e\x07\x1a\x54\xa1\xe6\xd9\xe4\xe1\x5a\xa7\x38\x39\x68\x0c\xcd\xb2\xe5\xa9\xe9\xe5\x99\x5c\x3a\x17\x78\x26\x97\xf1\xae\x7c\x7c\x72\xe9\xc6\x78\x57\xf6\xcc\xc6\xa6\x4f\x5f\x32\xcc\x9e\xb3\xa1\x3b\x26\x6e\xea\xec\x78\x63\xb6\x96\xad\xcf\x72\xf5\xdf\x13\xa9\x00\x59\x0d\x75\x6d\x73\x86\x8f\xad\xda\x6e\xa8\xa3\xb7\xb6\xb9\x6c\x72\x7f\xd1\xb0\x62\x08\x7f\xe4\x63\xf2\x86\x35\xa8\x89\x31\x35\xa5\x78\xaf\xaa\xc9\x80\x54\xf7\xd9\xa4\x11\xd0\x75\x28\x39\x66\x8b\x34\x70\x30\x65\xe7\xfb\xfd\x0e\x29\xd2\xd4\x09\xe5\xa3\x0e\x1b\xbb\x39\xc8\x7d\xe0\x31\x7c\x12\x69\x80\xd1\x3e\x90\x6c\x6c\x6f\x0a\x6a\xb0\x76\x2b\xd6\x16\xa7\xb9\xb5\x71\x4f\x79\xe3\xc4\xc9\xf1\x1b\x1b\x27\x16\xcc\x8e\xc6\xb5\x72\xd7\xbe\xe6\x49\x01\xa4\x83\xed\x8e\x82\x48\x17\x3c\x5c\x74\xd6\x0b\x8f\x33\x33\x98\xd3\x1b\xf5\x9e\xd5\x44\xdd\x6e\x5a\x7b\x9a\x55\x27\x2e\xea\xe2\x47\xb5\xaa\xc7\x22\x66\x44\xea\x3e\x59\xb4\xb8\x6d\xb5\x3d\x36\xd8\x9e\x1c\xd3\x96\x1c\xef\x0d\x57\x8d\xea\x2b\xd1\x67\x06\x76\x2b\xc3\xba\x6f\x2f\x14\x4f\x16\x33\xf8\xfc\xcb\x4f\xbf\x2c\x41\xa0\xd4\x8b\x89\x35\x61\x0c\x39\x10\x51\xa4\x84\xd2\x48\x47\xc3\xba\xda\x97\xa6\xbd\x77\x2f\xce\x9a\xdd\xed\x5b\x1a\xfa\xaf\xd3\x5d\x77\xaa\x7d\xde\x57\xda\x56\xd7\x35\x34\xe4\xba\xbe\xf0\x43\xed\xd2\xe1\x0a\xe5\x27\x4e\x77\x84\xdf\xfd\x0d\xef\x56\xfa\xba\x4c\xe7\x27\x7f\xad\x50\xf5\x55\x1e\x76\x28\xb7\x71\x38\xfc\xdd\xff\x13\xe1\x22\xbf\xfb\x24\x6a\x2b\x8c\xb8\x00\x90\x5f\xdf\x79\x52\xf7\x3b\xea\x04\x92\x1b\xb3\x42\x69\xf3\x65\x79\x09\xc4\x58\xa0\x1d\xc0\x61\xa2\xad\x9a\xb8\xa6\x5b\xf9\xa1\x11\x6e\x3e\x8f\x97\x6c\xf5\x19\xbf\xc8\x7f\xb0\x1d\xe1\x62\x4b\xa2\xfa\xa7\x62\xf5\xe2\x43\xf9\xf8\x95\x25\x6b\x88\xdc\x13\xc2\xe1\xa6\xe1\x87\x8a\xcc\x2e\x6c\xc2\xbb\x54\x23\xfb\x4b\x5a\x8d\x1b\xfb\x79\xaf\x87\x23\x54\xdb\xc5\x79\x2e\xa5\x43\x7f\xb5\x4c\x7d\xfd\xc1\xe5\xca\x55\x82\xd2\x89\xca\x71\xde\xd5\xf5\xcd\x9d\x44\x4f\xc7\xc6\xf7\xbf\xd3\x0b\xff\xa9\xe7\xbe\xda\x64\xd2\x7d\x31\xa7\xc1\x32\x4d\x72\xb1\x3f\x67\x4e\x73\x8c\xab\x0c\x4e\xa6\x20\x63\xd8\x2b\x90\x18\xc0\x04\xf0\x8e\xf3\x25\xbc\x4c\x26\xf3\x31\x57\x89\x90\x73\x17\x1d\xdf\xc8\xf9\x29\xdd\xf8\xa1\xe6\x44\xdf\x0e\xdd\xff\x86\x07\xed\xa3\x04\x77\x06\x8d\xa9\xf0\x03\x05\xbe\x79\x5f\xf1\x46\xfa\x73\xe7\x85\xc3\x91\x94\x90\x33\xcb\xcf\x6d\x62\x7a\xe6\x83\xff\x67\x3e\x18\x6e\xf4\xcb\xc2\x95\x2f\xab\x6a\x96\xf2\x6b\x47\xc9\x1a\x71\x2b\x56\xd4\x3a\x8a\x7c\xbb\x59\x08\xf6\x04\x46\xb8\x96\x31\x87\x86\x39\x50\x33\xc5\x1f\xac\x94\x47\xe6\x5d\x23\xcb\x4c\x58\x86\x9b\xd5\x22\xf3\xaa\x1b\x4d\x7a\xbe\xcb\x71\x49\x87\x4c\xdb\x2d\x6e\xe8\xb4\x90\xf3\x31\x96\x79\xeb\x30\x37\xff\x15\xe7\x40\x4d\x18\xa3\x60\x53\x09\x5b\x92\x14\x68\x51\x5d\xb5\x44\x1e\x4c\x06\xdb\xd3\x27\x73\xe5\xb4\xd4\xef\xbf\x01\x00\x00\xff\xff\xcf\xcd\xa1\x49\x07\x38\x00\x00")

func bindataTemplates07fieldertmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates07fieldertmpl,
		"templates/07_fielder.tmpl",
	)
}



func bindataTemplates07fieldertmpl() (*asset, error) {
	bytes, err := bindataTemplates07fieldertmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/07_fielder.tmpl",
		size: 14343,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598697630, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates08singlerelationertmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\xd1\x6b\xdb\x3e\x10\x7e\xf7\x5f\x71\x84\xfc\x9a\x38\x38\xce\xef\x39\x23\x2f\x2b\xdb\x08\x6c\x63\x34\x65\x7b\x18\x63\x08\xfb\x9c\x8a\xca\x92\x91\xe5\x74\x43\xe8\x7f\x1f\x92\x6c\x25\x76\xd2\xce\x2b\x2b\xf3\x43\x69\xa4\xd3\xf7\xdd\x7d\xf7\xdd\x69\x9d\x63\x41\x39\xc2\xa4\xa6\x7c\xcf\x70\x29\x91\x11\x45\x05\x47\x39\x81\xa5\x31\x91\xd6\x4b\x98\x8a\x46\xc1\x7a\x03\xa9\x3b\x59\xad\xe0\x5a\x94\x15\x65\x08\x8a\x96\x08\xd9\x1d\x66\xf7\x40\x0b\xd0\x3a\xfd\x48\x4a\x34\x06\x68\x59\x31\x2c\x91\xab\x1a\x4a\x52\x55\x94\xef\xd3\x9d\x83\xbf\x09\xe8\x40\xb9\x42\x59\x90\x0c\xd3\xe8\x40\x24\x7c\x7f\x3c\x72\x03\x57\x01\x5a\x9b\xc8\x26\xf0\x0e\x55\x17\xf0\x41\xe4\xc8\xfe\x94\xb1\x68\x78\x06\x73\xad\xd3\x1b\xcc\x90\x1e\x50\x1a\x03\x8b\x40\x12\x9f\xe1\xcf\x3b\x59\x60\x11\xe0\x95\x6c\x32\xf5\x96\x22\xcb\x63\x98\x77\xa7\x2e\x3a\x01\x94\x52\xc8\x18\x74\x04\x00\x50\x3f\x50\x95\xdd\x41\x07\x91\x6e\x79\x8e\x3f\xbe\xfe\xff\xad\xbd\xd6\x5a\x12\xbe\x47\x98\x06\x0e\x2b\x75\x47\x5f\x5b\xcd\xb5\xa6\x05\x70\xa1\x8e\x31\xe9\xb6\xde\x31\x9a\xa1\xeb\x88\x45\xc9\x48\x8d\xa0\xf5\xb4\xcf\x62\xcc\x1a\x56\xab\xde\xb9\x2f\xd1\xbd\xf1\xec\xb4\xe8\xc1\x7e\x12\x4e\xa7\x00\x6c\x3f\xd7\x5c\xeb\x82\x13\xbd\xd2\x73\x50\xd8\x6c\x80\x53\xd6\xd6\xd5\x7d\x12\x55\x23\xb9\xbd\x48\xec\x9f\x70\x67\xac\xb5\x90\xe7\x27\x3c\x6d\xe8\xc5\x72\x4f\xf2\xba\xd2\xda\xbd\x1b\x93\xd3\x91\xd3\x3d\xf2\x6a\xb6\xff\xb8\xe3\x1c\x0b\xd2\x30\xb5\x1e\x26\xe1\xf2\x75\x7d\xac\xd3\x2f\x92\x54\x45\xe8\xf1\x1b\x29\xb7\xfc\x40\x18\xcd\xbb\x26\x39\x17\x24\x30\xa9\xa4\x38\xd0\x1c\x73\xa0\xfe\x3e\xf4\x7c\x0d\xb3\xff\xea\x19\x14\x42\x42\x69\x1d\x62\x7f\xdf\xce\x26\x49\x08\x48\xa0\x67\xc6\xd8\x65\x63\x22\xef\xf6\xdd\x0b\xbb\x7d\x88\xff\xb4\xdb\x13\x5f\x02\xf4\x2c\x1f\x7b\xa9\xfe\x9a\xe3\xa3\xe0\xcd\x97\xb1\x3d\x2d\xda\x2a\x2e\x5a\xf6\x77\x06\x1c\x04\x8f\x99\x8c\x5e\x32\xaf\x49\x8d\xb7\x3f\x2b\xbf\xcf\xfa\x58\xc8\x6a\x7c\x2e\xc5\xe9\x74\xf5\x1c\xff\xc8\x3c\x1e\x47\x11\x1c\xad\x1b\xf3\x63\xcd\x16\xd7\x76\x66\xae\xc4\x7b\xf1\x80\xf2\x9a\x94\xc8\xa0\xcf\x1b\xfb\x81\x1a\x3c\xb2\x63\x27\xee\xed\x5b\x27\x72\x3a\x5f\x5c\xae\x3e\x7e\x65\xc3\x86\xda\x8f\x94\xf3\xe9\x16\x2d\x8e\x3b\xe2\x34\xb5\x11\x5a\x0c\x17\xc1\xc8\x1d\xf0\x99\xb0\x06\x2f\xed\x00\xef\xb3\x83\xbd\xf6\x63\xef\xd6\x40\xb0\xfe\x79\x75\x93\x76\xc2\xe2\xe7\xac\xad\x7f\xbf\xb1\xc2\x5a\xff\x15\x00\x00\xff\xff\xa7\x32\x42\x80\x5c\x08\x00\x00")

func bindataTemplates08singlerelationertmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates08singlerelationertmpl,
		"templates/08_single-relationer.tmpl",
	)
}



func bindataTemplates08singlerelationertmpl() (*asset, error) {
	bytes, err := bindataTemplates08singlerelationertmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/08_single-relationer.tmpl",
		size: 2140,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1597612013, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates09multirelationertmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5d\x8f\xe2\x36\x14\x7d\xe7\x57\xdc\xa2\x29\x24\x28\x84\xe9\x2b\x12\x95\xa6\xab\x6d\x35\xd2\x4c\x55\x2d\xab\xf6\x01\xa1\x55\x9a\xdc\xcc\x58\x38\x4e\xe4\x18\xb6\x2b\xcb\xff\xbd\x72\xec\x84\x7c\x90\x81\xa1\xa0\xdd\xa9\x76\x9e\x86\x38\x3e\xf7\xde\xe3\x7b\x4e\x6c\x4b\x19\x61\x4c\x18\xc2\x30\xd9\x52\x41\xa6\x1c\x69\x20\x48\xca\x90\x0f\x61\xaa\xd4\x40\xca\x29\xdc\xa4\x5b\x01\xf3\x05\xf8\xc5\x93\xd9\x0c\xde\xa5\x49\x46\x28\x82\x20\x09\x42\xf8\x8c\xe1\x06\xe2\x94\x83\x78\x46\x48\x82\x2c\x23\xec\xc9\x7f\xd4\x68\x1f\x2a\x30\x20\x4c\x20\x8f\x83\x10\x81\x24\x19\xc5\x04\x99\x28\x86\xfc\xc1\x2e\xe0\xf0\xa9\x77\xde\x02\x46\x52\xfa\xbf\x07\x09\x2a\x25\xd5\x40\x47\xbf\x8b\xa2\xf2\x85\xc7\x34\x42\xba\x47\xcc\x8f\x87\xf7\x07\xf1\x96\x85\xe0\x48\xe9\x7f\xc0\x10\xc9\x0e\xb9\x52\x30\xa9\x62\xb8\x1d\x78\xa7\xa4\x04\x26\x25\xfa\x52\xf0\x6d\x28\x7e\x25\x48\x23\x0f\x92\x22\x87\x2a\xb0\xfe\xe5\x02\x72\x9e\x72\x90\x03\x00\x80\xfc\x33\x11\xe1\x33\x94\x30\xfe\x3d\x8b\xf0\x9f\xd5\xed\xda\x0e\x4b\xc9\x03\xf6\x84\x70\x53\xc5\xd1\x54\x97\x29\xe4\x9a\x73\x29\x49\xbc\x1f\xf7\xef\xf3\x25\x25\x21\x16\xab\xa1\x11\xc2\x20\x47\x90\xf2\xa6\x19\x41\xa9\x39\xcc\x66\x8d\xe7\xa6\xc4\x62\x8e\x89\xbc\x07\xd5\x43\x3a\xb0\x23\xd2\x87\xf4\x33\xf2\x77\x41\x82\xb4\x16\xf3\x97\x20\xc7\x8f\x5f\x32\x74\x4d\x3e\x8d\x79\x4a\x79\x90\x6e\xf4\xec\x82\x0b\xdf\x99\xd4\x83\x96\x33\x95\x72\xab\xc8\x24\x86\x1f\xd2\x8d\x25\xa0\xfc\xe3\x28\xb6\x9c\x19\xea\x72\xff\x2f\x1e\x64\xb1\x53\xd2\xfa\x9e\xf3\x7b\xb6\x0b\x28\xa9\xd6\xe6\xcf\x80\x6e\xd1\x83\x61\xc6\xd3\x1d\x89\x30\x02\x62\xc6\x61\xa7\x07\x40\x7c\xc9\x70\x0e\xe3\x1f\x3f\x8e\xa1\xea\xcd\x58\x2f\xd8\x1c\xc6\x5d\x4a\xc6\x43\xbb\x8e\xfb\x14\xeb\x34\xb5\xd8\xff\x23\x2d\xda\xa9\xe2\xdf\x56\x24\xa5\x16\x4a\xad\xad\xfc\x6e\x20\x58\x2c\x80\x11\xda\xaa\x5c\x60\x92\x69\xfa\xea\xef\x1b\xca\xa4\x6a\xbc\x78\x5a\x08\x18\x69\xc0\x83\x95\x00\xb2\xa8\x91\x77\x6f\x71\x4a\x4d\xa4\x44\x16\x15\xab\x7d\x4a\xd0\x20\xcb\x90\x45\x4e\x1f\xe0\xeb\xf0\x3c\x93\x18\x4b\x45\x03\xeb\x3d\xc5\xe4\x10\x5e\xb3\x1b\x5d\xab\x2b\x5b\x6b\xf5\x4f\xf1\x38\xc2\x38\xd8\x52\x31\x1f\x9c\xd7\x76\x56\xf4\xdd\xb6\x2b\x53\xb0\x4d\x57\xf9\x61\xe1\x0e\xe3\xca\x5f\x5a\x9d\x66\x72\xb2\x29\x30\x42\x07\xc6\xe2\x7e\x43\xd1\xf0\xa0\xfc\xc2\x1e\xd7\xc1\x7f\xd9\xe4\x5c\x70\x12\x93\xc6\x6a\xdd\x30\x3a\x4f\xd3\x66\xa8\x73\xbf\x7d\xb7\x6b\xc1\xd6\x9a\xa9\x21\x09\xbd\x74\x9f\x4a\x5f\x9f\x2f\xc0\x24\x7c\x92\x0a\x9a\xb2\xb6\x9c\x55\xd2\x30\xbf\x5f\x74\x9a\x29\x20\xcd\xb1\x93\x0e\xb9\x4a\x1e\x23\xe7\x14\xb0\x15\x59\xbb\xbd\xc9\x6a\xfd\x9d\xa3\x36\x46\x4c\xef\x5c\x4c\x72\xb9\x91\x5c\x51\x9a\x91\xe0\xd0\xab\x5e\xd0\x6e\x52\x2b\xf2\x80\xf4\x4a\x4a\xfa\x25\x78\x27\xae\xac\xc1\x3b\x71\x6c\xa7\x41\x74\xa3\xeb\x10\x7b\x3d\xfe\x7f\xd4\x78\xf1\x8f\xea\x19\x9d\x56\xe4\xee\xc1\xd0\x10\xad\x77\xbd\x69\x0c\x59\x9a\xe7\xe4\x6f\x8a\x46\x7f\x3e\x3c\xda\x16\xb3\x99\x59\x5b\xf7\xa0\x58\xa4\x03\x25\x0f\x0f\x8b\xa7\xfd\x21\x26\xb1\x5d\xdf\x9f\x81\x22\xbb\xd0\x67\xd4\x85\x29\xfc\xf4\x96\x78\xb1\xc9\x1d\xff\xf8\x8f\x2a\x16\xfa\x78\x72\x5e\x43\x54\x3f\x8c\x6b\x51\x56\x45\xf1\x6b\x63\x11\x6f\xc2\xf1\x5a\x55\xbf\xd6\xf5\x1e\x90\x5d\xcf\xf1\x1e\x90\x1d\xdd\x72\x10\x26\xbc\xef\x6e\xd6\xec\xa2\xdb\x7d\xff\x1d\x33\x14\x3b\xe3\x82\x66\x72\x76\xef\xdf\x7e\xfd\x6f\xbd\x69\xef\xe5\x95\xf7\xd5\x1d\xfc\x93\x2e\x0f\x72\xf0\x7d\xff\x2d\x5e\x20\x94\xe7\xd6\x24\xd8\xa0\xb3\x5a\xf7\x1c\xfb\xbd\xa2\x07\x4d\xa5\xb5\x9d\x64\xeb\xd8\x76\xf2\xe5\x43\x73\x63\xdc\xd9\xa7\x5b\x46\x65\xfb\xdc\xfc\xdf\x2e\x2c\xa0\xef\xd2\x02\xbe\xb9\x8b\x8b\xa6\x2f\x94\xcb\xb4\x22\x6b\x58\x74\x79\x38\xf7\xba\xe3\xac\x8b\x88\x83\xc7\x9b\x13\x91\x5a\x40\x75\xd7\xf9\x8a\x07\xfd\xfc\xe5\x83\x7e\x55\xc6\x52\x70\xc2\x9e\x1c\xb7\xf7\xd0\x6f\x6d\xf8\xdf\x00\x00\x00\xff\xff\xa4\x20\x11\xfb\x8e\x15\x00\x00")

func bindataTemplates09multirelationertmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates09multirelationertmpl,
		"templates/09_multi-relationer.tmpl",
	)
}



func bindataTemplates09multirelationertmpl() (*asset, error) {
	bytes, err := bindataTemplates09multirelationertmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/09_multi-relationer.tmpl",
		size: 5518,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1597612013, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates10modeldefinitiontmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x0e\xc2\x30\x0c\x45\x77\x4e\xf1\x95\xdd\x3d\x06\x1b\x0b\x9c\x20\x52\x7e\x90\x25\x27\xad\x42\x18\x50\xd4\xbb\xa3\x06\x94\x01\xd1\x6e\xb6\xff\xfb\xcf\xad\x09\x02\xa3\x66\xc2\xa5\x39\xd0\xa4\x6f\x5a\x75\xce\x0e\xb2\xae\xa7\xd6\x50\x99\x16\xf3\x95\x70\x4b\xd1\xe4\xcb\xcb\x61\x42\x8f\x34\x62\x3a\x2b\x2d\xb0\xe0\x97\x8d\x9f\xfb\x60\x05\xcc\x61\xb4\x6e\x9a\xef\xc6\x2b\xcd\x6f\xaf\xfe\xd4\x1f\x1d\x90\x32\x88\x1d\xd1\xe5\x69\x55\x0f\x3c\x69\xcb\x8f\x35\xdf\xe9\x1d\x00\x00\xff\xff\xdd\x47\x50\x16\x0c\x01\x00\x00")

func bindataTemplates10modeldefinitiontmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates10modeldefinitiontmpl,
		"templates/10_model-definition.tmpl",
	)
}



func bindataTemplates10modeldefinitiontmpl() (*asset, error) {
	bytes, err := bindataTemplates10modeldefinitiontmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/10_model-definition.tmpl",
		size: 268,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1597612013, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates11singlefilemodelstmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x3f\x4b\x04\x31\x10\xc5\xfb\x7c\x8a\xc7\x22\x56\x6e\xb6\x3f\xb8\xca\xb3\xb0\xf0\xce\xe2\x3a\x11\x19\xdd\xb9\x35\xb8\xf9\x43\x12\x15\x19\xf2\xdd\x25\xd9\x05\x4f\xc1\x6e\x98\x37\xbf\x37\x6f\x12\x91\x1e\x23\x9f\x8c\x63\x74\xc9\xb8\x69\xe6\xfe\x64\x66\xee\xad\x1f\x79\x4e\x1d\xfa\x52\xd4\x30\xe0\xda\x8f\x8c\x89\x1d\x47\xca\x3c\xe2\xf9\x0b\x8e\xdf\xa3\x77\xc3\xda\xf3\x51\x63\x77\xc0\xfe\x70\xc4\xcd\xee\xf6\xa8\x2b\x73\x7c\x35\x09\xd5\x0c\x9f\x94\xce\x60\xca\x9b\x2a\x8b\x20\x1b\xcb\x29\x93\x0d\x28\x45\xa9\x40\x2f\x6f\x34\x31\x44\xf4\xfd\x52\xee\xc9\x72\x55\x44\x32\xdb\x30\x53\x66\x74\xc6\x06\x1f\x73\xea\xa0\xab\x32\x0c\xd8\xb7\x20\x4f\x77\x2d\x30\x52\xf6\x91\x13\x68\x9e\xcf\x36\x2e\xc7\xc0\x38\xe4\x9a\x69\x5d\xa4\xd5\x07\xc5\x3f\xf8\x16\x0f\x8f\x96\x42\x30\x6e\xd2\xad\x25\x0a\x00\x44\x22\xb9\x89\x71\xd1\x9c\xb0\xd9\x42\xaf\x40\x7d\x9f\x3a\x71\x29\xb2\x88\x7a\x09\x2d\xe5\x4a\x89\xb0\x1b\xdb\x44\x51\xff\x3b\x94\xf2\xeb\xbe\xa6\xf7\xed\x4b\x4c\x36\xde\x75\x2b\xd2\xc6\x7a\xb0\x1b\x7f\xaa\xea\xfd\x1d\x00\x00\xff\xff\xb0\x03\x5a\xd1\xc1\x01\x00\x00")

func bindataTemplates11singlefilemodelstmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates11singlefilemodelstmpl,
		"templates/11_single-file-models.tmpl",
	)
}



func bindataTemplates11singlefilemodelstmpl() (*asset, error) {
	bytes, err := bindataTemplates11singlefilemodelstmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/11_single-file-models.tmpl",
		size: 449,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1597612013, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates12singlefilecollectionstmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x8f\xe2\xd1\xa6\xf7\x85\x3d\xed\x7a\xd8\xcb\xae\x87\xe2\x45\x44\x66\xdb\xd9\x1a\x4c\x93\x92\x44\x45\x87\xfe\x77\x49\x5c\x68\x04\xc1\xdb\x90\x99\xef\xbd\x79\x13\x91\x06\x03\x5f\xb4\x65\xd4\x41\xdb\xd1\x70\x73\xd1\x86\x9b\xde\x19\xc3\x7d\xd4\xce\x86\x1a\xcd\xb2\x54\x6d\x8b\x9d\x1b\x18\x23\x5b\xf6\x14\x79\xc0\xf9\x13\x96\xdf\xbc\xb3\xed\xf5\xcd\x79\x85\xfd\x09\xc7\x53\x87\xbb\xfd\xa1\x53\x89\xe9\x5e\x74\x40\x52\xc4\x07\x85\x02\xa6\xb8\x49\x6d\x11\x44\x3d\x71\x88\x34\xcd\x58\x96\xaa\x9a\xa9\x7f\xa5\x91\x21\xa2\xee\x7f\xca\x23\x4d\x9c\x3a\x22\x91\xa7\xd9\x50\x64\xd4\x7a\x9a\x9d\x8f\xa1\x86\x4a\x9d\xb6\xc5\x31\x2f\xf2\xbc\x5b\xb7\x46\x88\xce\x73\x00\x19\x53\xd8\x16\xb1\x54\xf5\x4e\xfe\x2f\x70\x8b\xc7\xa7\xde\x79\x56\x07\xab\xa3\x26\xa3\xbf\xd8\x4b\x25\xe2\xc9\x8e\x8c\x9b\x55\x02\x9b\x2d\x54\x49\xa6\x3b\x01\x80\x48\x31\x55\x4c\xa8\x07\xf2\x9a\xce\xe6\x9a\xe9\xb6\x12\x61\x3b\x64\x2c\x07\xfc\xdf\x61\x59\x7e\xdd\x61\x9d\x6c\xf2\x27\xea\x54\xd6\xa5\x42\x06\x1a\xb0\x1d\xd6\x2a\x1b\x7e\x07\x00\x00\xff\xff\x20\xd0\xb5\x73\xf9\x01\x00\x00")

func bindataTemplates12singlefilecollectionstmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates12singlefilecollectionstmpl,
		"templates/12_single-file-collections.tmpl",
	)
}



func bindataTemplates12singlefilecollectionstmpl() (*asset, error) {
	bytes, err := bindataTemplates12singlefilecollectionstmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/12_single-file-collections.tmpl",
		size: 505,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1597782826, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates13collectiondefinitiontmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xca\xb1\x0a\x85\x30\x0c\x46\xe1\xbd\x4f\x11\xba\xf7\xbe\xd3\xb5\xfd\x85\x40\x6c\xa5\x26\x53\xc8\xbb\x8b\xe2\xe2\xe0\x76\x38\x7c\xee\x0d\x2b\x77\x50\xae\x43\x04\x55\x79\xf4\x72\x2f\xbe\x32\x53\x89\x48\xee\x8a\x6d\x97\xbf\xbe\xd9\xa1\xd3\xaa\xda\x44\xa6\x1f\x45\xa4\x2f\xb7\x18\x4b\xc3\x7c\x94\x7b\x21\xf4\x16\x71\x06\x00\x00\xff\xff\xd1\xbc\x4d\x93\x7b\x00\x00\x00")

func bindataTemplates13collectiondefinitiontmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates13collectiondefinitiontmpl,
		"templates/13_collection-definition.tmpl",
	)
}



func bindataTemplates13collectiondefinitiontmpl() (*asset, error) {
	bytes, err := bindataTemplates13collectiondefinitiontmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/13_collection-definition.tmpl",
		size: 123,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1597612013, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates14collectioninitializertmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\x55\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xce\xcf\xc9\x49\x4d\x2e\xc9\xcc\xcf\xd3\xcd\xcc\xcb\x2c\xc9\x4c\xcc\xc9\xac\x4a\x2d\x52\x52\xa8\xad\x55\x50\x50\x50\x88\x47\x48\x7b\x22\x64\x8b\x15\x6c\x15\x12\x0b\x0a\x52\xf3\x52\x34\x70\x28\xd0\x51\x40\x18\x56\x5d\xad\xe7\x0c\x57\xa4\x17\x96\x58\x94\x99\x98\x94\x93\xea\x97\x98\x9b\x5a\x5b\xab\xc9\x05\x72\x4b\x6a\x5e\x4a\x6d\x2d\x17\x20\x00\x00\xff\xff\x70\x57\x17\x2e\x96\x00\x00\x00")

func bindataTemplates14collectioninitializertmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates14collectioninitializertmpl,
		"templates/14_collection-initializer.tmpl",
	)
}



func bindataTemplates14collectioninitializertmpl() (*asset, error) {
	bytes, err := bindataTemplates14collectioninitializertmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/14_collection-initializer.tmpl",
		size: 150,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1597612013, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates15collectioninitializerfunctiontmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x50\xbd\x4e\xc3\x30\x10\xde\xfd\x14\x1f\x9d\x5a\x44\xd2\x1d\x94\xa9\x62\x60\xe1\x05\x10\x8a\x22\xe7\x82\x4e\xb2\xce\xd5\xc5\xa9\x00\xcb\xef\x8e\x1c\x4a\x9c\x81\x76\xe8\x0d\x96\xf5\xfd\xe9\xbb\x8b\xb1\xa7\x81\x85\xb0\xb1\xde\x39\xb2\x81\xbd\x54\x2c\x1c\xb8\x73\xfc\x4d\x5a\x0d\x93\xcc\xe0\x06\x55\x4a\x26\x7c\x1d\x09\x6d\x91\xbe\x14\x25\xb2\x72\x1b\x23\x0f\xa8\x9f\x3f\x03\xa9\x74\xee\xe0\x25\x68\x16\x6b\x4a\x16\xf7\xd6\x2b\xd5\x05\x8b\x91\xa4\x4f\x69\x07\x52\xf5\x6a\xcc\xa9\xd3\x0b\xd9\x23\xde\xde\xff\x67\x8c\xd9\xef\xf1\x4a\x93\x7a\x69\x0b\x7c\x58\xa4\x23\xec\xea\x3f\x78\xc5\x51\xfd\x89\x7b\xea\x61\x97\x22\xb5\xc9\xdd\xaf\xc6\xdc\xb6\xd8\x96\x54\x7f\xb7\xdb\x21\x1a\x00\x73\x83\xf6\x01\xab\x0b\xe3\xb1\x81\x76\xf2\x71\xe9\xae\xe3\xd9\x99\x87\x87\x9c\x86\x66\xed\xbf\xd6\xec\xaf\xc8\xd3\x6c\xbb\x6b\x20\xec\x56\x71\x79\x94\xc2\xa4\x92\xf9\x05\x4e\xa6\xbc\x67\x5a\xd8\x99\x64\x62\xac\x30\x07\xfe\x04\x00\x00\xff\xff\x78\xc7\xe4\xfb\x36\x02\x00\x00")

func bindataTemplates15collectioninitializerfunctiontmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates15collectioninitializerfunctiontmpl,
		"templates/15_collection-initializer-function.tmpl",
	)
}



func bindataTemplates15collectioninitializerfunctiontmpl() (*asset, error) {
	bytes, err := bindataTemplates15collectioninitializerfunctiontmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/15_collection-initializer-function.tmpl",
		size: 566,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1597781223, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/00_imports.tmpl":                         bindataTemplates00importstmpl,
	"templates/01_initialize_collections.tmpl":          bindataTemplates01initializecollectionstmpl,
	"templates/02_collection.tmpl":                      bindataTemplates02collectiontmpl,
	"templates/03_collection-structure.tmpl":            bindataTemplates03collectionstructuretmpl,
	"templates/04_collection-builder.tmpl":              bindataTemplates04collectionbuildertmpl,
	"templates/05_model.tmpl":                           bindataTemplates05modeltmpl,
	"templates/06_primary.tmpl":                         bindataTemplates06primarytmpl,
	"templates/07_fielder.tmpl":                         bindataTemplates07fieldertmpl,
	"templates/08_single-relationer.tmpl":               bindataTemplates08singlerelationertmpl,
	"templates/09_multi-relationer.tmpl":                bindataTemplates09multirelationertmpl,
	"templates/10_model-definition.tmpl":                bindataTemplates10modeldefinitiontmpl,
	"templates/11_single-file-models.tmpl":              bindataTemplates11singlefilemodelstmpl,
	"templates/12_single-file-collections.tmpl":         bindataTemplates12singlefilecollectionstmpl,
	"templates/13_collection-definition.tmpl":           bindataTemplates13collectiondefinitiontmpl,
	"templates/14_collection-initializer.tmpl":          bindataTemplates14collectioninitializertmpl,
	"templates/15_collection-initializer-function.tmpl": bindataTemplates15collectioninitializerfunctiontmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"00_imports.tmpl": {Func: bindataTemplates00importstmpl, Children: map[string]*bintree{}},
		"01_initialize_collections.tmpl": {Func: bindataTemplates01initializecollectionstmpl, Children: map[string]*bintree{}},
		"02_collection.tmpl": {Func: bindataTemplates02collectiontmpl, Children: map[string]*bintree{}},
		"03_collection-structure.tmpl": {Func: bindataTemplates03collectionstructuretmpl, Children: map[string]*bintree{}},
		"04_collection-builder.tmpl": {Func: bindataTemplates04collectionbuildertmpl, Children: map[string]*bintree{}},
		"05_model.tmpl": {Func: bindataTemplates05modeltmpl, Children: map[string]*bintree{}},
		"06_primary.tmpl": {Func: bindataTemplates06primarytmpl, Children: map[string]*bintree{}},
		"07_fielder.tmpl": {Func: bindataTemplates07fieldertmpl, Children: map[string]*bintree{}},
		"08_single-relationer.tmpl": {Func: bindataTemplates08singlerelationertmpl, Children: map[string]*bintree{}},
		"09_multi-relationer.tmpl": {Func: bindataTemplates09multirelationertmpl, Children: map[string]*bintree{}},
		"10_model-definition.tmpl": {Func: bindataTemplates10modeldefinitiontmpl, Children: map[string]*bintree{}},
		"11_single-file-models.tmpl": {Func: bindataTemplates11singlefilemodelstmpl, Children: map[string]*bintree{}},
		"12_single-file-collections.tmpl": {Func: bindataTemplates12singlefilecollectionstmpl, Children: map[string]*bintree{}},
		"13_collection-definition.tmpl": {Func: bindataTemplates13collectiondefinitiontmpl, Children: map[string]*bintree{}},
		"14_collection-initializer.tmpl": {Func: bindataTemplates14collectioninitializertmpl, Children: map[string]*bintree{}},
		"15_collection-initializer-function.tmpl": {Func: bindataTemplates15collectioninitializerfunctiontmpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
