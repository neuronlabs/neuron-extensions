// Code generated by neuron/generator. DO NOT EDIT.
// This file was generated at:
// Thu, 23 Jul 2020 00:53:32 +0200

package account

import (
	"github.com/google/uuid"
	"github.com/neuronlabs/neuron/errors"
	"github.com/neuronlabs/neuron/mapping"
)

// Neuron_Models stores all generated models in this package.
var Neuron_Models = []mapping.Model{
	&Account{},
}

// Compile time check if Account implements mapping.Model interface.
var _ mapping.Model = &Account{}

// NeuronCollectionName implements mapping.Model interface method.
// Returns the name of the collection for the 'Account'.
func (a *Account) NeuronCollectionName() string {
	return "accounts"
}

// IsPrimaryKeyZero implements mapping.Model interface method.
func (a *Account) IsPrimaryKeyZero() bool {
	return a.ID == uuid.UUID([16]byte{})
}

// GetPrimaryKeyValue implements mapping.Model interface method.
func (a *Account) GetPrimaryKeyValue() interface{} {
	return a.ID
}

// GetPrimaryKeyStringValue implements mapping.Model interface method.
func (a *Account) GetPrimaryKeyStringValue() (string, error) {
	id, err := a.ID.MarshalText()
	if err != nil {
		return "", errors.Newf(mapping.ClassFieldValue, "invalid primary field value: %v to parse string. Err: %v", a.ID, err)
	}
	return string(id), nil
}

// GetPrimaryKeyAddress implements mapping.Model interface method.
func (a *Account) GetPrimaryKeyAddress() interface{} {
	return &a.ID
}

// GetPrimaryKeyHashableValue implements mapping.Model interface method.
func (a *Account) GetPrimaryKeyHashableValue() interface{} {
	return a.ID
}

// GetPrimaryKeyZeroValue implements mapping.Model interface method.
func (a *Account) GetPrimaryKeyZeroValue() interface{} {
	return uuid.UUID([16]byte{})
}

// SetPrimaryKey implements mapping.Model interface method.
func (a *Account) SetPrimaryKeyValue(value interface{}) error {
	if v, ok := value.(uuid.UUID); ok {
		a.ID = v
		return nil
	} else if v, ok := value.([16]byte); ok {
		a.ID = uuid.UUID(v)
	}
	return errors.Newf(mapping.ClassFieldValue, "provided invalid value: '%T' for the primary field for model: '%T'",
		value, a)
}

// SetPrimaryKeyStringValue implements mapping.Model interface method.
func (a *Account) SetPrimaryKeyStringValue(value string) error {
	if err := a.ID.UnmarshalText([]byte(value)); err != nil {
		return errors.Newf(mapping.ClassFieldValue, "invalid primary field value: %v to parse string. Err: %v", a.ID, err)
	}
	return nil
}

// Compile time check if Account implements mapping.Fielder interface.
var _ mapping.Fielder = &Account{}

// GetFieldsAddress gets the address of provided 'field'.
func (a *Account) GetFieldsAddress(field *mapping.StructField) (interface{}, error) {
	switch field.Index[0] {
	case 0: // ID
		return &a.ID, nil
	case 1: // Username
		return &a.Username, nil
	case 2: // Email
		return &a.Email, nil
	case 3: // HashPassword
		return &a.HashPassword, nil
	case 4: // Password
		return &a.Password, nil
	}
	return nil, errors.Newf(mapping.ClassInvalidModelField, "provided invalid field: '%s' for given model: Account'", field.Name())
}

// GetFieldZeroValue implements mapping.Fielder interface.s
func (a *Account) GetFieldZeroValue(field *mapping.StructField) (interface{}, error) {
	switch field.Index[0] {
	case 0: // ID
		return uuid.UUID([16]byte{}), nil
	case 1: // Username
		return "", nil
	case 2: // Email
		return "", nil
	case 3: // HashPassword
		return nil, nil
	case 4: // Password
		return "", nil
	default:
		return nil, errors.Newf(mapping.ClassInvalidModelField, "provided invalid field name: '%s'", field.Name())
	}
}

// IsFieldZero implements mapping.Fielder interface.
func (a *Account) IsFieldZero(field *mapping.StructField) (bool, error) {
	switch field.Index[0] {
	case 0: // ID
		return a.ID == uuid.UUID([16]byte{}), nil
	case 1: // Username
		return a.Username == "", nil
	case 2: // Email
		return a.Email == "", nil
	case 3: // HashPassword
		return len(a.HashPassword) == 0, nil
	case 4: // Password
		return a.Password == "", nil
	}
	return false, errors.Newf(mapping.ClassInvalidModelField, "provided invalid field name: '%s'", field.Name())
}

// SetFieldZeroValue implements mapping.Fielder interface.s
func (a *Account) SetFieldZeroValue(field *mapping.StructField) error {
	switch field.Index[0] {
	case 0: // ID
		a.ID = uuid.UUID([16]byte{})
	case 1: // Username
		a.Username = ""
	case 2: // Email
		a.Email = ""
	case 3: // HashPassword
		a.HashPassword = nil
	case 4: // Password
		a.Password = ""
	default:
		return errors.Newf(mapping.ClassInvalidModelField, "provided invalid field name: '%s'", field.Name())
	}
	return nil
}

// GetHashableFieldValue implements mapping.Fielder interface.
func (a *Account) GetHashableFieldValue(field *mapping.StructField) (interface{}, error) {
	switch field.Index[0] {
	case 0: // ID
		return a.ID, nil
	case 1: // Username
		return a.Username, nil
	case 2: // Email
		return a.Email, nil
	case 3: // HashPassword
		return string(a.HashPassword), nil
	case 4: // Password
		return a.Password, nil
	}
	return nil, errors.Newf(mapping.ClassInvalidModelField, "provided invalid field: '%s' for given model: 'Account'", field.Name())
}

// GetFieldValue implements mapping.Fielder interface.
func (a *Account) GetFieldValue(field *mapping.StructField) (interface{}, error) {
	switch field.Index[0] {
	case 0: // ID
		return a.ID, nil
	case 1: // Username
		return a.Username, nil
	case 2: // Email
		return a.Email, nil
	case 3: // HashPassword
		return a.HashPassword, nil
	case 4: // Password
		return a.Password, nil
	}
	return nil, errors.Newf(mapping.ClassInvalidModelField, "provided invalid field: '%s' for given model: Account'", field.Name())
}

// SetFieldValue implements mapping.Fielder interface.
func (a *Account) SetFieldValue(field *mapping.StructField, value interface{}) (err error) {
	switch field.Index[0] {
	case 0: // ID
		if v, ok := value.(uuid.UUID); ok {
			a.ID = v
			return nil
		}
		if generic, ok := value.([]interface{}); ok {
			if len(generic) > 16 {
				return errors.Newf(mapping.ClassFieldValue, "provided too many values for the field: 'ID")
			}
			for i, item := range generic {
				if v, ok := item.(byte); ok {
					a.ID[i] = v
					continue
				}

			}
			return nil
		}
		// Checked wrapped types.
		if v, ok := value.([16]byte); ok {
			a.ID = uuid.UUID(v)
			return nil
		}
		return errors.Newf(mapping.ClassFieldValue, "provided invalid field type: '%T' for the field: %s", value, field.Name())
	case 1: // Username
		if v, ok := value.(string); ok {
			a.Username = v
			return nil
		}

		// Check alternate types for the Username.
		if v, ok := value.([]byte); ok {
			a.Username = string(v)
			return nil
		}
		return errors.Newf(mapping.ClassFieldValue, "provided invalid field type: '%T' for the field: %s", value, field.Name())
	case 2: // Email
		if v, ok := value.(string); ok {
			a.Email = v
			return nil
		}

		// Check alternate types for the Email.
		if v, ok := value.([]byte); ok {
			a.Email = string(v)
			return nil
		}
		return errors.Newf(mapping.ClassFieldValue, "provided invalid field type: '%T' for the field: %s", value, field.Name())
	case 3: // HashPassword
		if value == nil {
			a.HashPassword = nil
			return nil
		}
		if v, ok := value.([]byte); ok {
			a.HashPassword = v
			return nil
		}
		if generic, ok := value.([]interface{}); ok {
			for _, item := range generic {
				if v, ok := item.(byte); ok {
					a.HashPassword = append(a.HashPassword, v)
					continue
				}

			}
			return nil
		}
		// Check alternate types for the HashPassword.
		if v, ok := value.(string); ok {
			a.HashPassword = []byte(v)
			return nil
		}
		return errors.Newf(mapping.ClassFieldValue, "provided invalid field type: '%T' for the field: %s", value, field.Name())
	case 4: // Password
		if v, ok := value.(string); ok {
			a.Password = v
			return nil
		}

		// Check alternate types for the Password.
		if v, ok := value.([]byte); ok {
			a.Password = string(v)
			return nil
		}
		return errors.Newf(mapping.ClassFieldValue, "provided invalid field type: '%T' for the field: %s", value, field.Name())
	default:
		return errors.Newf(mapping.ClassInvalidModelField, "provided invalid field: '%s' for the model: 'Account'", field.Name())
	}
}

// SetPrimaryKeyStringValue implements mapping.Model interface method.
func (a *Account) ParseFieldsStringValue(field *mapping.StructField, value string) (interface{}, error) {
	switch field.Index[0] {
	case 0: // ID
		temp := a.ID
		if err := a.ID.UnmarshalText([]byte(value)); err != nil {
			return "", errors.Newf(mapping.ClassFieldValue, "invalid field 'ID' value: '%v' to parse string. Err: %v", a.ID, err)
		}
		bt, err := a.ID.MarshalText()
		if err != nil {
			return "", errors.Newf(mapping.ClassFieldValue, "invalid field 'ID' value: '%v' to parse string. Err: %v", a.ID, err)
		}
		a.ID = temp
		return string(bt), nil
	case 1: // Username
		return value, nil
	case 2: // Email
		return value, nil
	case 3: // HashPassword
		return "", errors.New(mapping.ClassFieldNotParser, "field 'HashPassword' doesn't have string setter.")
	case 4: // Password
		return value, nil
	}
	return nil, errors.Newf(mapping.ClassInvalidModelField, "provided invalid field: '%s' for given model: Account'", field.Name())
}
