{{define "collection-builder" -}}
{{$out := . -}}
// {{.Collection.QueryBuilder}} is the query builder used to create and execute
// queries for the {{.Model.Name}}model.
type {{.Collection.QueryBuilder}} struct {
    builder database.Builder
    err error
}

// Scope returns given query scope.
func ({{.Collection.Receiver}} *{{.Collection.QueryBuilder}}) Scope() *query.Scope {
    return {{$out.Collection.Receiver}}.builder.Scope()
}

// Err returns errors that occurred during query building process.
func ({{.Collection.Receiver}} *{{.Collection.QueryBuilder}}) Err() error {
    if {{.Collection.Receiver}}.err != nil {
        return {{.Collection.Receiver}}.err
    }
    return {{$out.Collection.Receiver}}.builder.Err()
}

// Ctx returns the context of given query builder.
func ({{.Collection.Receiver}} *{{.Collection.QueryBuilder}}) Ctx() context.Context {
    return {{$out.Collection.Receiver}}.builder.Ctx()
}

// Count returns the number of model instances for provided query.
func ({{.Collection.Receiver}} *{{.Collection.QueryBuilder}}) Count() (int64, error) {
    if {{.Collection.Receiver}}.err != nil {
        return 0, {{.Collection.Receiver}}.err
    }
    return {{$out.Collection.Receiver}}.builder.Count()
}

// Insert new '{{.Model.Name}}' instance(s) into the store.
func ({{.Collection.Receiver}} *{{.Collection.QueryBuilder}}) Insert() error {
    if {{.Collection.Receiver}}.err != nil {
        return {{.Collection.Receiver}}.err
    }
    return {{$out.Collection.Receiver}}.builder.Insert()
}

// Update updates given '{{.Model.Name}}' instances.
func ({{.Collection.Receiver}} *{{.Collection.QueryBuilder}}) Update() (int64, error) {
    if {{.Collection.Receiver}}.err != nil {
        return 0, {{.Collection.Receiver}}.err
    }
    return {{$out.Collection.Receiver}}.builder.Update()
}


// Find returns all {{.Model.Name}} models that matches to given query.
func ({{.Collection.Receiver}} *{{.Collection.QueryBuilder}}) Find() ([]*{{.Model.Name}}, error) {
    if {{.Collection.Receiver}}.err != nil {
        return nil, {{.Collection.Receiver}}.err
    }
    queryModels, err := {{$out.Collection.Receiver}}.builder.Find()
    if err != nil {
        return nil, err
    }
    models := make([]*{{ .Model.Name }}, len(queryModels))
    for i := range queryModels {
        models[i] = queryModels[i].(*{{ .Model.Name }})
    }
    return models, nil
}

// Refresh refreshes input '{{.Model.Name}}' model fields. It might be combine with the included relations.
func ({{.Collection.Receiver}} *{{.Collection.QueryBuilder}}) Refresh() error {
    if {{.Collection.Receiver}}.err != nil {
        return {{.Collection.Receiver}}.err
    }
    return {{.Collection.Receiver}}.builder.Refresh()
}

// Get returns single {{.Model.Name}} model that matches given query.
// If the model is not found the function returns error of query.ErrQueryNoResult.
func ({{.Collection.Receiver}} *{{.Collection.QueryBuilder}}) Get() (*{{.Model.Name}}, error) {
    if {{.Collection.Receiver}}.err != nil {
        return nil, {{.Collection.Receiver}}.err
    }
    model, err := {{$out.Collection.Receiver}}.builder.Get()
    if err != nil {
        return nil, err
    }
    return model.(*{{ .Model.Name }}), nil
}

// Delete deletes {{.Model.Name}} instances that matches given query.
func ({{.Collection.Receiver}} *{{.Collection.QueryBuilder}}) Delete() (int64, error) {
    if {{.Collection.Receiver}}.err != nil {
        return 0, {{.Collection.Receiver}}.err
    }
    return {{$out.Collection.Receiver}}.builder.Delete()
}

// Filter adds the 'filter' to the given query.
func ({{.Collection.Receiver}} *{{.Collection.QueryBuilder}}) Filter(filter filter.Filter) (*{{.Collection.QueryBuilder}}) {
    if {{.Collection.Receiver}}.err != nil {
       return {{.Collection.Receiver}}
    }
    {{$out.Collection.Receiver}}.builder.Filter(filter)
    return {{$out.Collection.Receiver}}
}

// Where creates query with given 'filter' and 'values'.
func ({{.Collection.Receiver}} *{{.Collection.QueryBuilder}}) Where(filter string, values ...interface{}) (*{{.Collection.QueryBuilder}}) {
    if {{.Collection.Receiver}}.err != nil {
        return {{.Collection.Receiver}}
    }
    {{$out.Collection.Receiver}}.builder.Where(filter, values...)
    return {{$out.Collection.Receiver}}
}

{{range $relation := .Model.Relations }}

// Include{{$relation.Name }} includes given 'relation' in the {{$out.Collection.Name}} query.
// An optional 'relationFieldset' defines the fields to return in the included relation.
func ({{$out.Collection.Receiver}} *{{$out.Collection.QueryBuilder}}) Include{{$relation.Name}}({{toLowerCamel $relation.Name}}Fieldset ...string) (*{{$out.Collection.QueryBuilder}}) {
    if {{$out.Collection.Receiver}}.err != nil {
        return {{$out.Collection.Receiver}}
    }
    relation, err := {{$out.Collection.VariableName}}.Model.RelationByIndex({{$relation.Index}})
    if err != nil {
        {{$out.Collection.Receiver}}.err =  errors.Wrapf(mapping.ErrInternal, "Getting '{{$relation.Name}}' by index for model '{{$out.Model.Name}}' failed: %v", err)
        return {{$out.Collection.Receiver}}
    }
    // check the fieldset for the relation.
    var relationFields []*mapping.StructField
    for _, field := range {{toLowerCamel $relation.Name}}Fieldset {
        structField, ok := relation.ModelStruct().FieldByName(field)
        if !ok {
            {{$out.Collection.Receiver}}.err = errors.Wrapf(mapping.ErrInvalidModelField, "field: '%s' is not found for the '{{$relation.BaseType}}' model", field)
            return {{$out.Collection.Receiver}}
        }
        relationFields = append(relationFields, structField)
    }
    {{$out.Collection.Receiver}}.builder.Include(relation, relationFields...)
    return {{$out.Collection.Receiver}}
}
{{- end}}

// Limit sets the maximum number of objects returned by the Find process,
// Returns error if the given scope has already different type of pagination.
func ({{.Collection.Receiver}} *{{.Collection.QueryBuilder}}) Limit(limit int64) (*{{.Collection.QueryBuilder}}) {
    if {{.Collection.Receiver}}.err != nil {
        return {{.Collection.Receiver}}
    }
    {{$out.Collection.Receiver}}.builder.Limit(limit)
    return {{$out.Collection.Receiver}}
}

// Offset sets the query result's offset. It says to skip as many object's from the repository
// before beginning to return the result. 'Offset' 0 is the same as omitting the 'Offset' clause.
// Returns error if the given scope has already different type of pagination.
func ({{.Collection.Receiver}} *{{.Collection.QueryBuilder}}) Offset(offset int64) (*{{.Collection.QueryBuilder}}) {
    if {{.Collection.Receiver}}.err != nil {
        return {{.Collection.Receiver}}
    }
    {{$out.Collection.Receiver}}.builder.Offset(offset)
    return {{$out.Collection.Receiver}}
}

// Select adds the fields to the scope's fieldset.
// Allowed fields to select:
//  - {{.Model.Primary.Name}} / {{.Model.Primary.NeuronName}}
{{range $field := .Model.Fields -}}
//  - {{$field.Name}} / {{$field.NeuronName}}
{{end -}}
func ({{.Collection.Receiver}} *{{.Collection.QueryBuilder}}) Select(fields ...string) (*{{.Collection.QueryBuilder}}) {
    if {{.Collection.Receiver}}.err != nil {
        return {{.Collection.Receiver}}
    }
    var fieldSet []*mapping.StructField
    for _, field := range fields {
        structField, ok := {{.Collection.VariableName}}.Model.FieldByName(field)
        if !ok {
            {{.Collection.Receiver}}.err = errors.Wrapf(mapping.ErrInvalidModelField, "field: '%s' is not valid for model: '{{.Collection.Name}}'",field)
            return {{.Collection.Receiver}}
        }
        fieldSet = append(fieldSet, structField)
    }
    {{$out.Collection.Receiver}}.builder.Select(fieldSet...)
    return {{$out.Collection.Receiver}}
}

// OrderBy adds the sort fields into query scope. By default field is ordered ascending. In order to sort descending
// add '-' before the field name i.e. '-id'. The order of the fields relates to the significance of the sorting order.
// Allowed fields to sort:
//  - {{.Model.Primary.Name}}
{{range $field := .Model.Fields -}}
{{if $field.Sortable -}}
//  - {{$field.Name}}
{{end -}}{{end -}}
func ({{.Collection.Receiver}} *{{.Collection.QueryBuilder}}) OrderBy(fields ...string) (*{{.Collection.QueryBuilder}}) {
    if {{.Collection.Receiver}}.err != nil {
        return {{.Collection.Receiver}}
    }
    sortFields := make([]query.Sort, len(fields))
    for i, field := range fields {
        if len(field) == 0 {
            {{.Collection.Receiver}}.err = errors.Wrap(mapping.ErrInvalidModelField, "cannot set sorting order for an empty field for model: '{{.Collection.Name}}'")
            return {{.Collection.Receiver}}
        }
        var order query.SortOrder
        if field[0] == '-' {
            order = query.DescendingOrder
            field = field[1:]
        }
        structField, ok := {{.Collection.VariableName}}.Model.FieldByName(field)
        if !ok {
            {{.Collection.Receiver}}.err = errors.Wrapf(mapping.ErrInvalidModelField, "field: '%s' is not valid for model: '{{.Collection.Name}}'", field)
            return {{.Collection.Receiver}}
        }
        sortFields[i] = query.SortField{StructField: structField, SortOrder: order}
    }
    {{.Collection.Receiver}}.builder.OrderBy(sortFields...)
    return {{.Collection.Receiver}}
}
{{range $relation := .Model.Relations -}}
{{- $relationName := (toLowerCamel $relation.Name)}}
{{- $relationSelector := (printf "_%s" $relationName) }}

// Add{{$relation.Name}} adds related model {{$relation.Name}} and matches to given {{$out.Model.Name}}.
func ({{$out.Collection.Receiver}} *{{$out.Collection.QueryBuilder}}) Add{{$relation.Name}}({{$relationSelector}} {{if $relation.IsSlice}}...{{end}}*{{$relation.BaseType}}) error {
    if {{$out.Collection.Receiver}}.err != nil {
        return {{$out.Collection.Receiver}}.err
    }
    relation, err := {{$out.Collection.VariableName}}.Model.RelationByIndex({{$relation.Index}})
    if err != nil {
        return errors.Wrapf(mapping.ErrInternal, "getting '{{$relation.Name}}' relation by index for model '{{$out.Model.Name}}' failed: %v", err)
    }
    {{if not $relation.IsSlice -}}
    return {{$out.Collection.Receiver}}.builder.AddRelations(relation, {{$relationSelector}})
    {{- else -}}
    models := make([]mapping.Model, len({{$relationSelector}}))
    for i := range {{$relationSelector}} {
        models[i] = {{$relationSelector}}[i]
    }
    return {{$out.Collection.Receiver}}.builder.AddRelations(relation, models...)
    {{- end}}
}
{{- end}}
{{range $relation := .Model.Relations -}}{{- /* TODO: check if the relation is allowed to be set. */ -}}
{{- $relationName := (toLowerCamel $relation.Name)}}
{{- $relationSelector := (printf "_%s" $relationName) }}

// Set{{$relation.Name}} sets related model {{$relation.Name}} and matches to given {{$out.Model.Name}}.
func ({{$out.Collection.Receiver}} *{{$out.Collection.QueryBuilder}}) Set{{$relation.Name}}({{$relationSelector}} {{if $relation.IsSlice}}...{{end}}*{{$relation.BaseType}}) error {
    if {{$out.Collection.Receiver}}.err != nil {
        return {{$out.Collection.Receiver}}.err
    }
    relation, err := {{$out.Collection.VariableName}}.Model.RelationByIndex({{$relation.Index}})
    if err != nil {
        return errors.Wrapf(mapping.ErrInternal, "getting '{{$relation.Name}}' relation by index for model '{{$out.Model.Name}}' failed: %v", err)
    }
    {{if not $relation.IsSlice -}}
    return {{$out.Collection.Receiver}}.builder.SetRelations(relation, {{$relationSelector}})
    {{- else -}}
    models := make([]mapping.Model, len({{$relationSelector}}))
    for i := range {{$relationSelector}} {
        models[i] = {{$relationSelector}}[i]
    }
    return {{$out.Collection.Receiver}}.builder.SetRelations(relation, models...)
    {{- end}}
}
{{- end}}
{{range $relation := .Model.Relations -}}{{- /* TODO: check if the relation is ready to be removed. */ -}}
{{- $relationName := (toLowerCamel $relation.Name)}}

// Remove{{$relation.Name}} removes related model {{$relation.Name}} and matches to given {{$out.Model.Name}}.
func ({{$out.Collection.Receiver}} *{{$out.Collection.QueryBuilder}}) Remove{{$relation.Name}}() (int64, error) {
    if {{$out.Collection.Receiver}}.err != nil {
        return 0, {{$out.Collection.Receiver}}.err
    }
    relation, err := {{$out.Collection.VariableName}}.Model.RelationByIndex({{$relation.Index}})
    if err != nil {
        return 0, errors.Wrapf(mapping.ErrInternal, "getting '{{$relation.Name}}' relation by index for model '{{$out.Model.Name}}' failed: %v", err)
    }
    return {{$out.Collection.Receiver}}.builder.RemoveRelations(relation)
}
{{- end}}
{{- end}}